/* umd */
(function (g, f) {
      if ("object" == typeof exports && "object" == typeof module) {
        module.exports = f();
      } else if ("function" == typeof define && define.amd) {
        define("quranjsApi", [], f);
      } else if ("object" == typeof exports) {
        exports["quranjsApi"] = f();
      } else {
        g["quranjsApi"] = {};
        Object.assign(g["quranjsApi"], f());
      }
    }(this, () => {
  var exports = {};
  var module = { exports };




(function (factory) {
  typeof define === 'function' && define.amd ? define(factory) :
  factory();
})((function () { 'use strict';

  /* @QuranJS/API version 1.7.3 */
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/.pnpm/humps@2.0.1/node_modules/humps/humps.js
  var require_humps = __commonJS({
    "node_modules/.pnpm/humps@2.0.1/node_modules/humps/humps.js"(exports, module2) {
      (function(global) {
        var _processKeys = function(convert, obj, options) {
          if (!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {
            return obj;
          }
          var output, i = 0, l = 0;
          if (_isArray(obj)) {
            output = [];
            for (l = obj.length; i < l; i++) {
              output.push(_processKeys(convert, obj[i], options));
            }
          } else {
            output = {};
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                output[convert(key, options)] = _processKeys(convert, obj[key], options);
              }
            }
          }
          return output;
        };
        var separateWords = function(string, options) {
          options = options || {};
          var separator = options.separator || "_";
          var split = options.split || /(?=[A-Z])/;
          return string.split(split).join(separator);
        };
        var camelize = function(string) {
          if (_isNumerical(string)) {
            return string;
          }
          string = string.replace(/[\-_\s]+(.)?/g, function(match, chr) {
            return chr ? chr.toUpperCase() : "";
          });
          return string.substr(0, 1).toLowerCase() + string.substr(1);
        };
        var pascalize = function(string) {
          var camelized = camelize(string);
          return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);
        };
        var decamelize3 = function(string, options) {
          return separateWords(string, options).toLowerCase();
        };
        var toString = Object.prototype.toString;
        var _isFunction = function(obj) {
          return typeof obj === "function";
        };
        var _isObject = function(obj) {
          return obj === Object(obj);
        };
        var _isArray = function(obj) {
          return toString.call(obj) == "[object Array]";
        };
        var _isDate = function(obj) {
          return toString.call(obj) == "[object Date]";
        };
        var _isRegExp = function(obj) {
          return toString.call(obj) == "[object RegExp]";
        };
        var _isBoolean = function(obj) {
          return toString.call(obj) == "[object Boolean]";
        };
        var _isNumerical = function(obj) {
          obj = obj - 0;
          return obj === obj;
        };
        var _processor = function(convert, options) {
          var callback = options && "process" in options ? options.process : options;
          if (typeof callback !== "function") {
            return convert;
          }
          return function(string, options2) {
            return callback(string, convert, options2);
          };
        };
        var humps = {
          camelize,
          decamelize: decamelize3,
          pascalize,
          depascalize: decamelize3,
          camelizeKeys: function(object, options) {
            return _processKeys(_processor(camelize, options), object);
          },
          decamelizeKeys: function(object, options) {
            return _processKeys(_processor(decamelize3, options), object, options);
          },
          pascalizeKeys: function(object, options) {
            return _processKeys(_processor(pascalize, options), object);
          },
          depascalizeKeys: function() {
            return this.decamelizeKeys.apply(this, arguments);
          }
        };
        if (typeof define === "function" && define.amd) {
          define(humps);
        } else if (typeof module2 !== "undefined" && module2.exports) {
          module2.exports = humps;
        } else {
          global.humps = humps;
        }
      })(exports);
    }
  });

  // src/index.ts
  var src_exports = {};
  __export(src_exports, {
    CharType: () => CharType,
    Language: () => Language,
    QuranFont: () => QuranFont,
    quran: () => sdk_default
  });
  module.exports = __toCommonJS(src_exports);

  // src/types/api/Word.ts
  var CharType = /* @__PURE__ */ ((CharType2) => {
    CharType2["Word"] = "word";
    CharType2["End"] = "end";
    CharType2["Pause"] = "pause";
    CharType2["Sajdah"] = "sajdah";
    CharType2["RubElHizb"] = "rub-el-hizb";
    return CharType2;
  })(CharType || {});

  // src/types/index.ts
  var Language = /* @__PURE__ */ ((Language2) => {
    Language2["ARABIC"] = "ar";
    Language2["ENGLISH"] = "en";
    Language2["URDU"] = "ur";
    Language2["BENGALI"] = "bn";
    Language2["TURKISH"] = "tr";
    Language2["SPANISH"] = "es";
    Language2["GERMAN"] = "de";
    Language2["BOSNIAN"] = "bs";
    Language2["RUSSIAN"] = "ru";
    Language2["ALBANIAN_AL"] = "al";
    Language2["FRENCH"] = "fr";
    Language2["DUTCH"] = "nl";
    Language2["TAMIL"] = "ta";
    Language2["TAJIK"] = "tg";
    Language2["INDONESIAN"] = "id";
    Language2["UZBEK"] = "uz";
    Language2["VIETNAMESE"] = "vi";
    Language2["CHINESE"] = "zh";
    Language2["ITALIAN"] = "it";
    Language2["JAPANESE"] = "ja";
    Language2["MALAYALAM"] = "ml";
    Language2["AMHARIC"] = "am";
    Language2["KAZAKH"] = "kk";
    Language2["PORTUGUESE"] = "pt";
    Language2["TAGALOG"] = "tl";
    Language2["THAI"] = "th";
    Language2["KOREAN"] = "ko";
    Language2["HINDI"] = "hi";
    Language2["KURDISH"] = "ku";
    Language2["HAUSA"] = "ha";
    Language2["AZERI"] = "az";
    Language2["SWAHILI"] = "sw";
    Language2["PERSIAN"] = "fa";
    Language2["SERBIAN"] = "sr";
    Language2["MARANAO"] = "mrn";
    Language2["AMAZIGH"] = "zgh";
    Language2["ASSAMESE"] = "as";
    Language2["BULGARIAN"] = "bg";
    Language2["CHECHEN"] = "ce";
    Language2["CZECH"] = "cs";
    Language2["DIVEHI"] = "dv";
    Language2["DHIVEHI"] = "dv";
    Language2["MALDIVIAN"] = "dv";
    Language2["FINNISH"] = "fi";
    Language2["GUJAARATI"] = "gu";
    Language2["HEBREW"] = "he";
    Language2["GEORGIAN"] = "ka";
    Language2["CENTRAL_KHMER"] = "km";
    Language2["GANDA"] = "lg";
    Language2["MARATHI"] = "mr";
    Language2["YORUBA"] = "yo";
    Language2["MALAY"] = "ms";
    Language2["NEPALI"] = "ne";
    Language2["SWEDISH"] = "sv";
    Language2["TELUGU"] = "te";
    Language2["TATAR"] = "tt";
    Language2["UIGHUR"] = "ug";
    Language2["UYGHUR"] = "ug";
    Language2["UKRAINIAN"] = "uk";
    Language2["NORWEGIAN"] = "no";
    Language2["OROMO"] = "om";
    Language2["POLISH"] = "pl";
    Language2["PASHTO"] = "ps";
    Language2["ROMANIAN"] = "ro";
    Language2["SINDHI"] = "sd";
    Language2["NORTHERN_SAMI"] = "se";
    Language2["SINHALA"] = "si";
    Language2["SINHALESE"] = "si";
    Language2["SOMALI"] = "so";
    Language2["ALBANIAN_SQ"] = "sq";
    return Language2;
  })(Language || {});
  var QuranFont = /* @__PURE__ */ ((QuranFont2) => {
    QuranFont2["MadaniV1"] = "code_v1";
    QuranFont2["MadaniV2"] = "code_v2";
    QuranFont2["Uthmani"] = "text_uthmani";
    return QuranFont2;
  })(QuranFont || {});

  // src/sdk/v4/_fetcher.ts
  var import_humps = __toESM(require_humps());

  // src/utils/misc.ts
  var removeBeginningSlash = (url) => {
    return url.startsWith("/") ? url.slice(1) : url;
  };

  // src/sdk/v4/_fetcher.ts
  var API_BASE_URL = "https://api.quran.com/api/v4/";
  var makeUrl = (url, params) => {
    const baseUrl = `${API_BASE_URL}${removeBeginningSlash(url)}`;
    if (!params)
      return baseUrl;
    const paramsWithDecamelizedKeys = (0, import_humps.decamelizeKeys)(params);
    const paramsString = new URLSearchParams(
      Object.entries(paramsWithDecamelizedKeys).filter(
        ([, value]) => value !== void 0
      )
    ).toString();
    if (!paramsString)
      return baseUrl;
    return `${baseUrl}?${paramsString}`;
  };
  var fetcher = async (url, params = {}, fetchFn) => {
    if (fetchFn) {
      const json2 = await fetchFn(makeUrl(url, params));
      return (0, import_humps.camelizeKeys)(json2);
    }
    if (typeof globalThis.fetch !== "function") {
      throw new Error(
        "Looks like there is no global fetch function. Take a look at https://quranjs.com/techniques#custom-fetcher for more info."
      );
    }
    const res = await globalThis.fetch(makeUrl(url, params));
    if (!res.ok || res.status >= 400) {
      throw new Error(`${res.status} ${res.statusText}`);
    }
    const json = await res.json();
    return (0, import_humps.camelizeKeys)(json);
  };
  var mergeApiOptions = (options = {}, defaultOptions4 = {}) => {
    const clonedOptions = { ...options };
    if (clonedOptions.fetchFn)
      clonedOptions.fetchFn = void 0;
    const final = {
      ...defaultOptions4,
      ...clonedOptions
    };
    if (final.fields) {
      const fields = [];
      Object.entries(final.fields).forEach(([key, value]) => {
        if (value)
          fields.push((0, import_humps.decamelize)(key));
      });
      final.fields = fields.join(",");
    }
    return final;
  };

  // src/sdk/utils.ts
  var versesMapping = {
    "1": 7,
    "2": 286,
    "3": 200,
    "4": 176,
    "5": 120,
    "6": 165,
    "7": 206,
    "8": 75,
    "9": 129,
    "10": 109,
    "11": 123,
    "12": 111,
    "13": 43,
    "14": 52,
    "15": 99,
    "16": 128,
    "17": 111,
    "18": 110,
    "19": 98,
    "20": 135,
    "21": 112,
    "22": 78,
    "23": 118,
    "24": 64,
    "25": 77,
    "26": 227,
    "27": 93,
    "28": 88,
    "29": 69,
    "30": 60,
    "31": 34,
    "32": 30,
    "33": 73,
    "34": 54,
    "35": 45,
    "36": 83,
    "37": 182,
    "38": 88,
    "39": 75,
    "40": 85,
    "41": 54,
    "42": 53,
    "43": 89,
    "44": 59,
    "45": 37,
    "46": 35,
    "47": 38,
    "48": 29,
    "49": 18,
    "50": 45,
    "51": 60,
    "52": 49,
    "53": 62,
    "54": 55,
    "55": 78,
    "56": 96,
    "57": 29,
    "58": 22,
    "59": 24,
    "60": 13,
    "61": 14,
    "62": 11,
    "63": 11,
    "64": 18,
    "65": 12,
    "66": 12,
    "67": 30,
    "68": 52,
    "69": 52,
    "70": 44,
    "71": 28,
    "72": 28,
    "73": 20,
    "74": 56,
    "75": 40,
    "76": 31,
    "77": 50,
    "78": 40,
    "79": 46,
    "80": 42,
    "81": 29,
    "82": 19,
    "83": 36,
    "84": 25,
    "85": 22,
    "86": 17,
    "87": 19,
    "88": 26,
    "89": 30,
    "90": 20,
    "91": 15,
    "92": 21,
    "93": 11,
    "94": 8,
    "95": 8,
    "96": 19,
    "97": 5,
    "98": 8,
    "99": 8,
    "100": 11,
    "101": 11,
    "102": 8,
    "103": 3,
    "104": 9,
    "105": 5,
    "106": 4,
    "107": 7,
    "108": 3,
    "109": 6,
    "110": 3,
    "111": 5,
    "112": 4,
    "113": 5,
    "114": 6
  };
  var isValidChapterId = (id) => {
    const parsedId = typeof id === "number" ? id : Number(id);
    if (!parsedId || parsedId <= 0 || parsedId > 114)
      return false;
    return true;
  };
  var isValidJuz = (juz) => {
    const parsedJuz = typeof juz === "number" ? juz : Number(juz);
    if (!parsedJuz || parsedJuz <= 0 || parsedJuz > 30)
      return false;
    return true;
  };
  var isValidRub = (rub) => {
    const parsedRub = typeof rub === "number" ? rub : Number(rub);
    if (!parsedRub || parsedRub <= 0 || parsedRub > 240)
      return false;
    return true;
  };
  var isValidHizb = (hizb) => {
    const parsedHizb = typeof hizb === "number" ? hizb : Number(hizb);
    if (!parsedHizb || parsedHizb <= 0 || parsedHizb > 60)
      return false;
    return true;
  };
  var isValidQuranPage = (page) => {
    const parsedPage = typeof page === "number" ? page : Number(page);
    if (!parsedPage || parsedPage <= 0 || parsedPage > 604)
      return false;
    return true;
  };
  var isValidVerseKey = (key) => {
    const [chapterId, verseId] = key.trim().split(":");
    if (!chapterId || !verseId || !isValidChapterId(chapterId))
      return false;
    const parsedVerse = Number(verseId);
    const verseCount = versesMapping[chapterId];
    if (!parsedVerse || parsedVerse <= 0 || parsedVerse > verseCount)
      return false;
    return true;
  };
  var utils = {
    isValidChapterId,
    isValidJuz,
    isValidRub,
    isValidHizb,
    isValidQuranPage,
    isValidVerseKey
  };
  var utils_default = utils;

  // src/sdk/v4/chapters.ts
  var defaultOptions = {
    language: "ar" /* ARABIC */
  };
  var findAll = async (options) => {
    const params = mergeApiOptions(options, defaultOptions);
    const { chapters: chapters2 } = await fetcher(
      "/chapters",
      params,
      options == null ? void 0 : options.fetchFn
    );
    return chapters2;
  };
  var findById = async (id, options) => {
    if (!utils_default.isValidChapterId(id))
      throw new Error("Invalid chapter id");
    const params = mergeApiOptions(options, defaultOptions);
    const { chapter } = await fetcher(
      `/chapters/${id}`,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return chapter;
  };
  var findInfoById = async (id, options) => {
    if (!utils_default.isValidChapterId(id))
      throw new Error("Invalid chapter id");
    const params = mergeApiOptions(options, defaultOptions);
    const { chapterInfo } = await fetcher(
      `/chapters/${id}/info`,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return chapterInfo;
  };
  var chapters = {
    findAll,
    findById,
    findInfoById
  };
  var chapters_default = chapters;

  // src/sdk/v4/verses.ts
  var import_humps2 = __toESM(require_humps());
  var defaultOptions2 = {
    language: "ar" /* ARABIC */,
    perPage: 50,
    words: false
  };
  var mergeVerseOptions = (options = {}) => {
    const result = mergeApiOptions(options, defaultOptions2);
    if (result.translations)
      result.translations = result.translations.join(",");
    if (result.tafsirs)
      result.tafsirs = result.tafsirs.join(",");
    if (result.wordFields) {
      const wordFields = [];
      Object.entries(result.wordFields).forEach(([key, value]) => {
        if (value)
          wordFields.push((0, import_humps2.decamelize)(key));
      });
      result.wordFields = wordFields.join(",");
    }
    if (result.translationFields) {
      const translationFields = [];
      Object.entries(result.translationFields).forEach(([key, value]) => {
        if (value)
          translationFields.push((0, import_humps2.decamelize)(key));
      });
      result.translationFields = translationFields.join(",");
    }
    if (result.reciter) {
      result.audio = result.reciter;
      result.reciter = void 0;
    }
    return result;
  };
  var findByKey = async (key, options) => {
    if (!utils_default.isValidVerseKey(key))
      throw new Error("Invalid verse key");
    const params = mergeVerseOptions(options);
    const url = `/verses/by_key/${key}`;
    const { verse } = await fetcher(
      url,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return verse;
  };
  var findByChapter = async (id, options) => {
    if (!utils_default.isValidChapterId(id))
      throw new Error("Invalid chapter id");
    const params = mergeVerseOptions(options);
    const url = `/verses/by_chapter/${id}`;
    const { verses: verses2 } = await fetcher(
      url,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return verses2;
  };
  var findByPage = async (page, options) => {
    if (!utils_default.isValidQuranPage(page))
      throw new Error("Invalid page");
    const params = mergeVerseOptions(options);
    const url = `/verses/by_page/${page}`;
    const { verses: verses2 } = await fetcher(
      url,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return verses2;
  };
  var findByJuz = async (juz, options) => {
    if (!utils_default.isValidJuz(juz))
      throw new Error("Invalid juz");
    const params = mergeVerseOptions(options);
    const url = `/verses/by_juz/${juz}`;
    const { verses: verses2 } = await fetcher(
      url,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return verses2;
  };
  var findByHizb = async (hizb, options) => {
    if (!utils_default.isValidHizb(hizb))
      throw new Error("Invalid hizb");
    const params = mergeVerseOptions(options);
    const url = `/verses/by_hizb/${hizb}`;
    const { verses: verses2 } = await fetcher(
      url,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return verses2;
  };
  var findByRub = async (rub, options) => {
    if (!utils_default.isValidRub(rub))
      throw new Error("Invalid rub");
    const params = mergeVerseOptions(options);
    const { verses: verses2 } = await fetcher(
      `/verses/by_rub/${rub}`,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return verses2;
  };
  var findRandom = async (options) => {
    const params = mergeVerseOptions(options);
    const { verse } = await fetcher(
      "/verses/random",
      params,
      options == null ? void 0 : options.fetchFn
    );
    return verse;
  };
  var verses = {
    findByKey,
    findByChapter,
    findByPage,
    findByJuz,
    findByHizb,
    findByRub,
    findRandom
  };
  var verses_default = verses;

  // src/sdk/v4/juzs.ts
  var findAll2 = async (options) => {
    const { juzs: juzs2 } = await fetcher(
      "/juzs",
      void 0,
      options == null ? void 0 : options.fetchFn
    );
    return juzs2;
  };
  var juzs = { findAll: findAll2 };
  var juzs_default = juzs;

  // src/sdk/v4/audio.ts
  var defaultChapterRecitationsOptions = {
    language: "ar" /* ARABIC */
  };
  var defaultVerseRecitationsOptions = {
    language: "ar" /* ARABIC */
  };
  var findAllChapterRecitations = async (reciterId, options) => {
    const params = mergeApiOptions(options, defaultChapterRecitationsOptions);
    const { audioFiles } = await fetcher(
      `/chapter_recitations/${reciterId}`,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return audioFiles;
  };
  var findChapterRecitationById = async (chapterId, reciterId, options) => {
    if (!utils_default.isValidChapterId(chapterId))
      throw new Error("Invalid chapter id");
    const params = mergeApiOptions(options, defaultChapterRecitationsOptions);
    const { audioFile } = await fetcher(
      `/chapter_recitations/${reciterId}/${chapterId}`,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return audioFile;
  };
  var findVerseRecitationsByChapter = async (chapterId, recitationId, options) => {
    if (!utils_default.isValidChapterId(chapterId))
      throw new Error("Invalid chapter id");
    const params = mergeApiOptions(options, defaultVerseRecitationsOptions);
    const data = await fetcher(
      `/recitations/${recitationId}/by_chapter/${chapterId}`,
      params,
      options == null ? void 0 : options.fetchFn
    );
    return data;
  };
  var findVerseRecitationsByJuz = async (juz, recitationId, options) => {
    if (!utils_default.isValidJuz(juz))
      throw new Error("Invalid juz");
    const params = mergeApiOptions(options, defaultVerseRecitationsOptions);
    const data = await fetcher(`/recitations/${recitationId}/by_juz/${juz}`, params, options == null ? void 0 : options.fetchFn);
    return data;
  };
  var findVerseRecitationsByPage = async (page, recitationId, options) => {
    if (!utils_default.isValidQuranPage(page))
      throw new Error("Invalid page");
    const params = mergeApiOptions(options, defaultVerseRecitationsOptions);
    const data = await fetcher(`/recitations/${recitationId}/by_page/${page}`, params, options == null ? void 0 : options.fetchFn);
    return data;
  };
  var findVerseRecitationsByRub = async (rub, recitationId, options) => {
    if (!utils_default.isValidRub(rub))
      throw new Error("Invalid rub");
    const params = mergeApiOptions(options, defaultVerseRecitationsOptions);
    const data = await fetcher(`/recitations/${recitationId}/by_rub/${rub}`, params, options == null ? void 0 : options.fetchFn);
    return data;
  };
  var findVerseRecitationsByHizb = async (hizb, recitationId, options) => {
    if (!utils_default.isValidHizb(hizb))
      throw new Error("Invalid hizb");
    const params = mergeApiOptions(options, defaultVerseRecitationsOptions);
    const data = await fetcher(`/recitations/${recitationId}/by_hizb/${hizb}`, params, options == null ? void 0 : options.fetchFn);
    return data;
  };
  var findVerseRecitationsByKey = async (key, recitationId, options) => {
    if (!utils_default.isValidVerseKey(key))
      throw new Error("Invalid verse key");
    const params = mergeApiOptions(options, defaultVerseRecitationsOptions);
    const data = await fetcher(`/recitations/${recitationId}/by_ayah/${key}`, params, options == null ? void 0 : options.fetchFn);
    return data;
  };
  var audio = {
    findAllChapterRecitations,
    findChapterRecitationById,
    findVerseRecitationsByChapter,
    findVerseRecitationsByJuz,
    findVerseRecitationsByPage,
    findVerseRecitationsByRub,
    findVerseRecitationsByHizb,
    findVerseRecitationsByKey
  };
  var audio_default = audio;

  // src/sdk/v4/resources.ts
  var defaultOptions3 = {
    language: "ar" /* ARABIC */
  };
  var findAllRecitations = async (options) => {
    const params = mergeApiOptions(options);
    const { recitations } = await fetcher("/resources/recitations", params, options == null ? void 0 : options.fetchFn);
    return recitations;
  };
  var findRecitationInfo = async (id, options) => {
    const params = mergeApiOptions(options, defaultOptions3);
    const { info } = await fetcher(`/resources/recitations/${id}/info`, params, options == null ? void 0 : options.fetchFn);
    return info;
  };
  var findAllTranslations = async (options) => {
    const params = mergeApiOptions(options, defaultOptions3);
    const { translations } = await fetcher("/resources/translations", params, options == null ? void 0 : options.fetchFn);
    return translations;
  };
  var findTranslationInfo = async (id, options) => {
    const params = mergeApiOptions(options, defaultOptions3);
    const { info } = await fetcher(`/resources/translations/${id}/info`, params, options == null ? void 0 : options.fetchFn);
    return info;
  };
  var findAllTafsirs = async (options) => {
    const params = mergeApiOptions(options, defaultOptions3);
    const { tafsirs } = await fetcher("/resources/tafsirs", params, options == null ? void 0 : options.fetchFn);
    return tafsirs;
  };
  var findTafsirInfo = async (id, options) => {
    const params = mergeApiOptions(options, defaultOptions3);
    const { info } = await fetcher(`/resources/tafsirs/${id}/info`, params, options == null ? void 0 : options.fetchFn);
    return info;
  };
  var findAllRecitationStyles = async (options) => {
    const { recitationStyles } = await fetcher("/resources/recitation_styles", void 0, options == null ? void 0 : options.fetchFn);
    return recitationStyles;
  };
  var findAllLanguages = async (options) => {
    const params = mergeApiOptions(options, defaultOptions3);
    const { languages } = await fetcher("/resources/languages", params, options == null ? void 0 : options.fetchFn);
    return languages;
  };
  var findAllChapterInfos = async (options) => {
    const params = mergeApiOptions(options, defaultOptions3);
    const { chapterInfos } = await fetcher("/resources/chapter_infos", params, options == null ? void 0 : options.fetchFn);
    return chapterInfos;
  };
  var findVerseMedia = async (options) => {
    const params = mergeApiOptions(options, defaultOptions3);
    const { verseMedia } = await fetcher(`/resources/verse_media`, params, options == null ? void 0 : options.fetchFn);
    return verseMedia;
  };
  var findAllChapterReciters = async (options) => {
    const params = mergeApiOptions(options, defaultOptions3);
    const { reciters } = await fetcher(`/resources/chapter_reciters`, params, options == null ? void 0 : options.fetchFn);
    return reciters;
  };
  var resources = {
    findAllRecitations,
    findAllTranslations,
    findAllTafsirs,
    findAllRecitationStyles,
    findAllLanguages,
    findVerseMedia,
    findAllChapterReciters,
    findAllChapterInfos,
    findRecitationInfo,
    findTranslationInfo,
    findTafsirInfo
  };
  var resources_default = resources;

  // src/sdk/v4/search.ts
  var defaultSearchOptions = {
    language: "ar" /* ARABIC */,
    size: 30
  };
  var search = async (q, options) => {
    const params = mergeApiOptions({ q, ...options }, defaultSearchOptions);
    const { search: search2 } = await fetcher(
      "/search",
      params,
      options == null ? void 0 : options.fetchFn
    );
    return search2;
  };
  var searchApi = { search };
  var search_default = searchApi;

  // src/sdk/v4/index.ts
  var v4 = {
    chapters: chapters_default,
    verses: verses_default,
    juzs: juzs_default,
    audio: audio_default,
    resources: resources_default,
    search: search_default
  };
  var v4_default = v4;

  // src/sdk/index.ts
  var quran = {
    v4: v4_default,
    utils: utils_default
  };
  var sdk_default = quran;

}));



if (typeof module.exports == "object" && typeof exports == "object") {
    var __cp = (to, from, except, desc) => {
      if ((from && typeof from === "object") || typeof from === "function") {
        for (let key of Object.getOwnPropertyNames(from)) {
          if (!Object.prototype.hasOwnProperty.call(to, key) && key !== except)
          Object.defineProperty(to, key, {
            get: () => from[key],
            enumerable: !(desc = Object.getOwnPropertyDescriptor(from, key)) || desc.enumerable,
          });
        }
      }
      return to;
    };
    module.exports = __cp(module.exports, exports);
  }
  return module.exports;
  }))




//# sourceMappingURL=index.umd.js.map
