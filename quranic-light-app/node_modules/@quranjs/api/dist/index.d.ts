declare type _NumbersFrom0ToN<Nr extends number> = Nr extends Nr ? number extends Nr ? number : Nr extends 0 ? never : _NumbersFrom0ToNRec<Nr, [], 0> : never;
declare type _NumbersFrom0ToNRec<Nr extends number, Counter extends any[], Accumulator extends number> = Counter['length'] extends Nr ? Accumulator : _NumbersFrom0ToNRec<Nr, [any, ...Counter], Accumulator | Counter['length']>;
declare type NumberRange<Start extends number, End extends number> = Exclude<_NumbersFrom0ToN<End>, _NumbersFrom0ToN<Start>>;
declare type NumberUnionToString<TType> = TType extends number ? `${TType}` : TType;

declare type VerseKey = `1:${NumberRange<1, 8>}` | `2:${NumberRange<1, 287>}` | `3:${NumberRange<1, 201>}` | `4:${NumberRange<1, 177>}` | `5:${NumberRange<1, 121>}` | `6:${NumberRange<1, 166>}` | `7:${NumberRange<1, 207>}` | `8:${NumberRange<1, 76>}` | `9:${NumberRange<1, 130>}` | `10:${NumberRange<1, 110>}` | `11:${NumberRange<1, 124>}` | `12:${NumberRange<1, 112>}` | `13:${NumberRange<1, 44>}` | `14:${NumberRange<1, 53>}` | `15:${NumberRange<1, 100>}` | `16:${NumberRange<1, 129>}` | `17:${NumberRange<1, 112>}` | `18:${NumberRange<1, 111>}` | `19:${NumberRange<1, 99>}` | `20:${NumberRange<1, 136>}` | `21:${NumberRange<1, 113>}` | `22:${NumberRange<1, 79>}` | `23:${NumberRange<1, 119>}` | `24:${NumberRange<1, 65>}` | `25:${NumberRange<1, 78>}` | `26:${NumberRange<1, 228>}` | `27:${NumberRange<1, 94>}` | `28:${NumberRange<1, 89>}` | `29:${NumberRange<1, 70>}` | `30:${NumberRange<1, 61>}` | `31:${NumberRange<1, 35>}` | `32:${NumberRange<1, 31>}` | `33:${NumberRange<1, 74>}` | `34:${NumberRange<1, 55>}` | `35:${NumberRange<1, 46>}` | `36:${NumberRange<1, 84>}` | `37:${NumberRange<1, 183>}` | `38:${NumberRange<1, 89>}` | `39:${NumberRange<1, 76>}` | `40:${NumberRange<1, 86>}` | `41:${NumberRange<1, 55>}` | `42:${NumberRange<1, 54>}` | `43:${NumberRange<1, 90>}` | `44:${NumberRange<1, 60>}` | `45:${NumberRange<1, 38>}` | `46:${NumberRange<1, 36>}` | `47:${NumberRange<1, 39>}` | `48:${NumberRange<1, 30>}` | `49:${NumberRange<1, 19>}` | `50:${NumberRange<1, 46>}` | `51:${NumberRange<1, 61>}` | `52:${NumberRange<1, 50>}` | `53:${NumberRange<1, 63>}` | `54:${NumberRange<1, 56>}` | `55:${NumberRange<1, 79>}` | `56:${NumberRange<1, 97>}` | `57:${NumberRange<1, 30>}` | `58:${NumberRange<1, 23>}` | `59:${NumberRange<1, 25>}` | `60:${NumberRange<1, 14>}` | `61:${NumberRange<1, 15>}` | `62:${NumberRange<1, 12>}` | `63:${NumberRange<1, 12>}` | `64:${NumberRange<1, 19>}` | `65:${NumberRange<1, 13>}` | `66:${NumberRange<1, 13>}` | `67:${NumberRange<1, 31>}` | `68:${NumberRange<1, 53>}` | `69:${NumberRange<1, 53>}` | `70:${NumberRange<1, 45>}` | `71:${NumberRange<1, 29>}` | `72:${NumberRange<1, 29>}` | `73:${NumberRange<1, 21>}` | `74:${NumberRange<1, 57>}` | `75:${NumberRange<1, 41>}` | `76:${NumberRange<1, 32>}` | `77:${NumberRange<1, 51>}` | `78:${NumberRange<1, 41>}` | `79:${NumberRange<1, 47>}` | `80:${NumberRange<1, 43>}` | `81:${NumberRange<1, 30>}` | `82:${NumberRange<1, 20>}` | `83:${NumberRange<1, 37>}` | `84:${NumberRange<1, 26>}` | `85:${NumberRange<1, 23>}` | `86:${NumberRange<1, 18>}` | `87:${NumberRange<1, 20>}` | `88:${NumberRange<1, 27>}` | `89:${NumberRange<1, 31>}` | `90:${NumberRange<1, 21>}` | `91:${NumberRange<1, 16>}` | `92:${NumberRange<1, 22>}` | `93:${NumberRange<1, 12>}` | `94:${NumberRange<1, 9>}` | `95:${NumberRange<1, 9>}` | `96:${NumberRange<1, 20>}` | `97:${NumberRange<1, 6>}` | `98:${NumberRange<1, 9>}` | `99:${NumberRange<1, 9>}` | `100:${NumberRange<1, 12>}` | `101:${NumberRange<1, 12>}` | `102:${NumberRange<1, 9>}` | `103:${NumberRange<1, 4>}` | `104:${NumberRange<1, 10>}` | `105:${NumberRange<1, 6>}` | `106:${NumberRange<1, 5>}` | `107:${NumberRange<1, 8>}` | `108:${NumberRange<1, 4>}` | `109:${NumberRange<1, 7>}` | `110:${NumberRange<1, 4>}` | `111:${NumberRange<1, 6>}` | `112:${NumberRange<1, 5>}` | `113:${NumberRange<1, 6>}` | `114:${NumberRange<1, 7>}`;

declare type _ChapterId = NumberRange<1, 115>;
declare type ChapterId = _ChapterId | NumberUnionToString<_ChapterId>;

declare type _HizbNumber = NumberRange<1, 61>;
declare type HizbNumber = _HizbNumber | NumberUnionToString<_HizbNumber>;

declare type _JuzNumber = NumberRange<1, 31>;
declare type JuzNumber = _JuzNumber | NumberUnionToString<_JuzNumber>;

declare type _PageNumber = NumberRange<1, 605>;
declare type PageNumber = _PageNumber | NumberUnionToString<_PageNumber>;

declare type _RubNumber = NumberRange<1, 241>;
declare type RubNumber = _RubNumber | NumberUnionToString<_RubNumber>;

interface Translation {
    id?: number;
    text: string;
    resourceId: number;
    resourceName?: string;
    verseId?: number;
    languageId?: number;
    languageName?: string;
    verseKey?: VerseKey;
    chapterId?: number;
    verseNumber?: number;
    juzNumber?: number;
    hizbNumber?: number;
    rubNumber?: number;
    pageNumber?: number;
}

interface Transliteration {
    languageName?: string;
    text?: string;
}

declare enum CharType {
    Word = "word",
    End = "end",
    Pause = "pause",
    Sajdah = "sajdah",
    RubElHizb = "rub-el-hizb"
}
interface Word {
    id?: number;
    position: number;
    audioUrl: string;
    charTypeName: CharType;
    codeV1?: string;
    codeV2?: string;
    pageNumber?: number;
    lineNumber?: number;
    text?: string;
    textUthmani?: string;
    textIndopak?: string;
    textImlaei?: string;
    translation: Translation;
    transliteration: Transliteration;
    location?: string;
    verseKey?: VerseKey;
}

interface SearchResponse {
    search: {
        query: string;
        totalResults: number;
        currentPage: number;
        totalPages: number;
        results?: {
            verseKey: string;
            verse_id: number;
            text: string;
            highlighted: string;
            words: Word[];
            translations: Translation[];
        }[];
    };
}

/**
 * Segment structure is [wordFrom, wordTo, timeFrom, timeTo] time is in ms
 */
declare type Segment = [number, number, number, number];

interface ChapterRecitation {
    id: number;
    chapterId: number;
    fileSize: number;
    format: string;
    audioUrl: string;
}
interface VerseRecitation {
    verseKey: VerseKey;
    url: string;
    id?: number;
    chapterId?: number;
    segments?: Segment[];
    format?: string;
}

interface AudioResponse {
    url?: string;
    duration?: number;
    format?: string;
    verseKey: string;
    segments?: Segment[];
}

interface TranslatedName {
    name: string;
    languageName: string;
}

interface Chapter {
    id: number;
    versesCount: number;
    bismillahPre: boolean;
    revelationOrder: number;
    revelationPlace: string;
    pages: Array<number>;
    nameComplex: string;
    nameSimple: string;
    transliteratedName: string;
    nameArabic: string;
    translatedName: TranslatedName;
}

interface ChapterInfo {
    id: number;
    chapterId: number;
    text: string;
    shortText: string;
    source: string;
    languageName?: string;
}

interface Footnote {
    id: number | string;
    text: string;
    languageName?: string;
    languageId?: number;
}

interface Reciter {
    id: number;
    name: string;
    recitationStyle: string;
    relativePath: string;
    profilePicture?: string;
    coverImage?: string;
    bio?: string;
    qirat?: {
        languageName: string;
        name: string;
    };
    style?: {
        languageName: string;
        name: string;
    };
    translatedName?: {
        languageName: string;
        name: string;
    };
}

interface Tafsir {
    id?: number;
    resourceId?: number;
    text?: string;
    resourceName?: string;
    languageName?: string;
}

interface TafsirInfo {
    id?: number;
    name?: string;
    authorName?: string;
    slug?: string;
    languageName?: string;
    translatedName: TranslatedName;
}

interface Verse {
    id: number;
    verseNumber: number;
    verseKey: VerseKey;
    chapterId?: number | string;
    pageNumber: number;
    juzNumber: number;
    hizbNumber: number;
    rubElHizbNumber: number;
    words?: Word[];
    textUthmani?: string;
    textUthmaniSimple?: string;
    textUthmaniTajweed?: string;
    textImlaei?: string;
    textImlaeiSimple?: string;
    textIndopak?: string;
    sajdahNumber: null;
    imageUrl?: string;
    imageWidth?: number;
    v1Page?: number;
    v2Page?: number;
    codeV1?: string;
    codeV2?: string;
    translations?: Translation[];
    tafsirs?: Tafsir[];
    audio?: AudioResponse;
}

interface Juz {
    id: number;
    juzNumber: number;
    verseMapping: Record<number, string>;
    firstVerseId: number;
    lastVerseId: number;
    versesCount: number;
}

interface Pagination {
    perPage: number;
    currentPage: number;
    nextPage: number;
    totalPages: number;
    totalRecords: number;
}

interface RecitationResource {
    id?: number;
    reciterName?: string;
    style?: string;
    translatedName?: TranslatedName;
}
interface RecitationInfoResource {
    id?: number;
    info?: string;
}
interface TranslationResource {
    id?: number;
    name?: string;
    authorName?: string;
    slug?: string;
    languageName?: string;
    translatedName?: TranslatedName;
}
interface TranslationInfoResource {
    id?: number;
    info?: string;
}
interface TafsirResource {
    id?: number;
    name?: string;
    authorName?: string;
    slug?: string;
    languageName?: string;
    translatedName?: TranslatedName;
}
interface TafsirInfoResource {
    id?: number;
    info?: string;
}
interface RecitationStylesResource {
    mujawwad: string;
    murattal: string;
    muallim: string;
}
interface LanguageResource {
    id?: number;
    name?: string;
    nativeName?: string;
    isoCode?: string;
    direction?: string;
    translatedNames?: TranslatedName[];
}
interface ChapterInfoResource {
    id?: number;
    name?: string;
    authorName?: string;
    slug?: string;
    languageName?: string;
    translatedName?: TranslatedName;
}
interface VerseMediaResource {
    id?: number;
    name?: string;
    authorName?: string;
    languageName?: string;
}
interface ChapterReciterResource {
    id: number;
    name: string;
    arabicName?: string;
    relativePath?: string;
    format?: string;
    filesSize?: number;
}

declare type FetchFn = (url: string) => Promise<Record<string, unknown>>;

declare enum Language {
    ARABIC = "ar",
    ENGLISH = "en",
    URDU = "ur",
    BENGALI = "bn",
    TURKISH = "tr",
    SPANISH = "es",
    GERMAN = "de",
    BOSNIAN = "bs",
    RUSSIAN = "ru",
    ALBANIAN_AL = "al",
    FRENCH = "fr",
    DUTCH = "nl",
    TAMIL = "ta",
    TAJIK = "tg",
    INDONESIAN = "id",
    UZBEK = "uz",
    VIETNAMESE = "vi",
    CHINESE = "zh",
    ITALIAN = "it",
    JAPANESE = "ja",
    MALAYALAM = "ml",
    AMHARIC = "am",
    KAZAKH = "kk",
    PORTUGUESE = "pt",
    TAGALOG = "tl",
    THAI = "th",
    KOREAN = "ko",
    HINDI = "hi",
    KURDISH = "ku",
    HAUSA = "ha",
    AZERI = "az",
    SWAHILI = "sw",
    PERSIAN = "fa",
    SERBIAN = "sr",
    MARANAO = "mrn",
    AMAZIGH = "zgh",
    ASSAMESE = "as",
    BULGARIAN = "bg",
    CHECHEN = "ce",
    CZECH = "cs",
    DIVEHI = "dv",
    DHIVEHI = "dv",
    MALDIVIAN = "dv",
    FINNISH = "fi",
    GUJAARATI = "gu",
    HEBREW = "he",
    GEORGIAN = "ka",
    CENTRAL_KHMER = "km",
    GANDA = "lg",
    MARATHI = "mr",
    YORUBA = "yo",
    MALAY = "ms",
    NEPALI = "ne",
    SWEDISH = "sv",
    TELUGU = "te",
    TATAR = "tt",
    UIGHUR = "ug",
    UYGHUR = "ug",
    UKRAINIAN = "uk",
    NORWEGIAN = "no",
    OROMO = "om",
    POLISH = "pl",
    PASHTO = "ps",
    ROMANIAN = "ro",
    SINDHI = "sd",
    NORTHERN_SAMI = "se",
    SINHALA = "si",
    SINHALESE = "si",
    SOMALI = "so",
    ALBANIAN_SQ = "sq"
}
declare enum QuranFont {
    MadaniV1 = "code_v1",
    MadaniV2 = "code_v2",
    Uthmani = "text_uthmani"
}
declare type VerseField = 'chapterId' | 'textUthmani' | 'textUthmaniSimple' | 'textImlaei' | 'textImlaeiSimple' | 'textIndopak' | 'textUthmaniTajweed' | 'imageUrl' | 'imageWidth' | 'codeV1' | 'codeV2' | 'v1Page' | 'v2Page';
declare type WordField = 'v1Page' | 'v2Page' | 'textUthmani' | 'textImlaei' | 'textIndopak' | 'verseKey' | 'location' | 'codeV1' | 'codeV2';
declare type TranslationField = 'resourceName' | 'verseId' | 'languageId' | 'languageName' | 'verseKey' | 'chapterId' | 'verseNumber' | 'juzNumber' | 'hizbNumber' | 'rubNumber' | 'pageNumber';
declare type VerseRecitationField = 'id' | 'chapterId' | 'segments' | 'format';

interface BaseApiOptions {
    language: Language;
    fetchFn?: FetchFn;
}

declare const quran: {
    v4: {
        chapters: {
            findAll: (options?: Partial<BaseApiOptions> | undefined) => Promise<Chapter[]>;
            findById: (id: ChapterId, options?: Partial<BaseApiOptions> | undefined) => Promise<Chapter>;
            findInfoById: (id: ChapterId, options?: Partial<BaseApiOptions> | undefined) => Promise<ChapterInfo>;
        };
        verses: {
            findByKey: (key: VerseKey, options?: Partial<BaseApiOptions & {
                reciter: string | number;
                words: boolean;
                translations: number[] | string[];
                tafsirs: number[] | string[];
                wordFields: Partial<Record<WordField, boolean>>;
                translationFields: Partial<Record<TranslationField, boolean>>;
                fields: Partial<Record<VerseField, boolean>>;
                page: number;
                perPage: number;
            }> | undefined) => Promise<Verse>;
            findByChapter: (id: ChapterId, options?: Partial<BaseApiOptions & {
                reciter: string | number;
                words: boolean;
                translations: number[] | string[];
                tafsirs: number[] | string[];
                wordFields: Partial<Record<WordField, boolean>>;
                translationFields: Partial<Record<TranslationField, boolean>>;
                fields: Partial<Record<VerseField, boolean>>;
                page: number;
                perPage: number;
            }> | undefined) => Promise<Verse[]>;
            findByPage: (page: PageNumber, options?: Partial<BaseApiOptions & {
                reciter: string | number;
                words: boolean;
                translations: number[] | string[];
                tafsirs: number[] | string[];
                wordFields: Partial<Record<WordField, boolean>>;
                translationFields: Partial<Record<TranslationField, boolean>>;
                fields: Partial<Record<VerseField, boolean>>;
                page: number;
                perPage: number;
            }> | undefined) => Promise<Verse[]>;
            findByJuz: (juz: JuzNumber, options?: Partial<BaseApiOptions & {
                reciter: string | number;
                words: boolean;
                translations: number[] | string[];
                tafsirs: number[] | string[];
                wordFields: Partial<Record<WordField, boolean>>;
                translationFields: Partial<Record<TranslationField, boolean>>;
                fields: Partial<Record<VerseField, boolean>>;
                page: number;
                perPage: number;
            }> | undefined) => Promise<Verse[]>;
            findByHizb: (hizb: HizbNumber, options?: Partial<BaseApiOptions & {
                reciter: string | number;
                words: boolean;
                translations: number[] | string[];
                tafsirs: number[] | string[];
                wordFields: Partial<Record<WordField, boolean>>;
                translationFields: Partial<Record<TranslationField, boolean>>;
                fields: Partial<Record<VerseField, boolean>>;
                page: number;
                perPage: number;
            }> | undefined) => Promise<Verse[]>;
            findByRub: (rub: RubNumber, options?: Partial<BaseApiOptions & {
                reciter: string | number;
                words: boolean;
                translations: number[] | string[];
                tafsirs: number[] | string[];
                wordFields: Partial<Record<WordField, boolean>>;
                translationFields: Partial<Record<TranslationField, boolean>>;
                fields: Partial<Record<VerseField, boolean>>;
                page: number;
                perPage: number;
            }> | undefined) => Promise<Verse[]>;
            findRandom: (options?: Partial<BaseApiOptions & {
                reciter: string | number;
                words: boolean;
                translations: number[] | string[];
                tafsirs: number[] | string[];
                wordFields: Partial<Record<WordField, boolean>>;
                translationFields: Partial<Record<TranslationField, boolean>>;
                fields: Partial<Record<VerseField, boolean>>;
                page: number;
                perPage: number;
            }> | undefined) => Promise<Verse>;
        };
        juzs: {
            findAll: (options?: Omit<BaseApiOptions, "language"> | undefined) => Promise<Juz[]>;
        };
        audio: {
            findAllChapterRecitations: (reciterId: string, options?: Partial<BaseApiOptions> | undefined) => Promise<ChapterRecitation[]>;
            findChapterRecitationById: (chapterId: ChapterId, reciterId: string, options?: Partial<BaseApiOptions> | undefined) => Promise<ChapterRecitation>;
            findVerseRecitationsByChapter: (chapterId: ChapterId, recitationId: string, options?: Partial<BaseApiOptions & {
                fields: Partial<Record<VerseRecitationField, boolean>>;
            }> | undefined) => Promise<{
                audioFiles: VerseRecitation[];
                pagination: Pagination;
            }>;
            findVerseRecitationsByJuz: (juz: JuzNumber, recitationId: string, options?: Partial<BaseApiOptions & {
                fields: Partial<Record<VerseRecitationField, boolean>>;
            }> | undefined) => Promise<{
                audioFiles: VerseRecitation[];
                pagination: Pagination;
            }>;
            findVerseRecitationsByPage: (page: PageNumber, recitationId: string, options?: Partial<BaseApiOptions & {
                fields: Partial<Record<VerseRecitationField, boolean>>;
            }> | undefined) => Promise<{
                audioFiles: VerseRecitation[];
                pagination: Pagination;
            }>;
            findVerseRecitationsByRub: (rub: RubNumber, recitationId: string, options?: Partial<BaseApiOptions & {
                fields: Partial<Record<VerseRecitationField, boolean>>;
            }> | undefined) => Promise<{
                audioFiles: VerseRecitation[];
                pagination: Pagination;
            }>;
            findVerseRecitationsByHizb: (hizb: HizbNumber, recitationId: string, options?: Partial<BaseApiOptions & {
                fields: Partial<Record<VerseRecitationField, boolean>>;
            }> | undefined) => Promise<{
                audioFiles: VerseRecitation[];
                pagination: Pagination;
            }>;
            findVerseRecitationsByKey: (key: VerseKey, recitationId: string, options?: Partial<BaseApiOptions & {
                fields: Partial<Record<VerseRecitationField, boolean>>;
            }> | undefined) => Promise<{
                audioFiles: VerseRecitation[];
                pagination: Pagination;
            }>;
        };
        resources: {
            findAllRecitations: (options?: Partial<BaseApiOptions> | undefined) => Promise<RecitationResource[]>;
            findAllTranslations: (options?: Partial<BaseApiOptions> | undefined) => Promise<TranslationResource[]>;
            findAllTafsirs: (options?: Partial<BaseApiOptions> | undefined) => Promise<TafsirResource[]>;
            findAllRecitationStyles: (options?: Omit<BaseApiOptions, "language"> | undefined) => Promise<RecitationStylesResource>;
            findAllLanguages: (options?: Partial<BaseApiOptions> | undefined) => Promise<LanguageResource[]>;
            findVerseMedia: (options?: Partial<BaseApiOptions> | undefined) => Promise<VerseMediaResource>;
            findAllChapterReciters: (options?: Partial<BaseApiOptions> | undefined) => Promise<ChapterReciterResource[]>;
            findAllChapterInfos: (options?: Partial<BaseApiOptions> | undefined) => Promise<ChapterInfoResource[]>;
            findRecitationInfo: (id: string, options?: Partial<BaseApiOptions> | undefined) => Promise<RecitationInfoResource>;
            findTranslationInfo: (id: string, options?: Partial<BaseApiOptions> | undefined) => Promise<TranslationInfoResource>;
            findTafsirInfo: (id: string, options?: Partial<BaseApiOptions> | undefined) => Promise<TafsirInfoResource>;
        };
        search: {
            search: (q: string, options?: Partial<BaseApiOptions & {
                size: number;
                page: number;
            }> | undefined) => Promise<{
                query: string;
                totalResults: number;
                currentPage: number;
                totalPages: number;
                results?: {
                    verseKey: string;
                    verse_id: number;
                    text: string;
                    highlighted: string;
                    words: Word[];
                    translations: Translation[];
                }[] | undefined;
            }>;
        };
    };
    utils: {
        isValidChapterId: (id: string | number) => id is ChapterId;
        isValidJuz: (juz: string | number) => juz is JuzNumber;
        isValidRub: (rub: string | number) => rub is RubNumber;
        isValidHizb: (hizb: string | number) => hizb is HizbNumber;
        isValidQuranPage: (page: string | number) => page is PageNumber;
        isValidVerseKey: (key: string) => key is VerseKey;
    };
};

export { AudioResponse, Chapter, ChapterId, ChapterInfo, ChapterInfoResource, ChapterRecitation, ChapterReciterResource, CharType, FetchFn, Footnote, HizbNumber, Juz, JuzNumber, Language, LanguageResource, PageNumber, Pagination, QuranFont, RecitationInfoResource, RecitationResource, RecitationStylesResource, Reciter, RubNumber, SearchResponse, Segment, Tafsir, TafsirInfo, TafsirInfoResource, TafsirResource, TranslatedName, Translation, TranslationField, TranslationInfoResource, TranslationResource, Transliteration, Verse, VerseField, VerseKey, VerseMediaResource, VerseRecitation, VerseRecitationField, Word, WordField, quran };
