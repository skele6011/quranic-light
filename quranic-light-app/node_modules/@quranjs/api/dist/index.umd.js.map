{"version":3,"sources":["../node_modules/.pnpm/humps@2.0.1/node_modules/humps/humps.js","../src/index.ts","../src/types/api/Word.ts","../src/types/index.ts","../src/sdk/v4/_fetcher.ts","../src/utils/misc.ts","../src/sdk/utils.ts","../src/sdk/v4/chapters.ts","../src/sdk/v4/verses.ts","../src/sdk/v4/juzs.ts","../src/sdk/v4/audio.ts","../src/sdk/v4/resources.ts","../src/sdk/v4/search.ts","../src/sdk/v4/index.ts","../src/sdk/index.ts"],"names":["module","decamelize","options","CharType","Language","QuranFont","json","defaultOptions","chapters","import_humps","verses","findAll","juzs","search"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,wEAAAA,SAAA;AAUC,KAAC,SAAS,QAAQ;AAEjB,UAAI,eAAe,SAAS,SAAS,KAAK,SAAS;AACjD,YAAG,CAAC,UAAU,GAAG,KAAK,QAAQ,GAAG,KAAK,UAAU,GAAG,KAAK,WAAW,GAAG,KAAK,YAAY,GAAG,GAAG;AAC3F,iBAAO;AAAA,QACT;AAEA,YAAI,QACA,IAAI,GACJ,IAAI;AAER,YAAG,SAAS,GAAG,GAAG;AAChB,mBAAS,CAAC;AACV,eAAI,IAAE,IAAI,QAAQ,IAAE,GAAG,KAAK;AAC1B,mBAAO,KAAK,aAAa,SAAS,IAAI,IAAI,OAAO,CAAC;AAAA,UACpD;AAAA,QACF,OACK;AACH,mBAAS,CAAC;AACV,mBAAQ,OAAO,KAAK;AAClB,gBAAG,OAAO,UAAU,eAAe,KAAK,KAAK,GAAG,GAAG;AACjD,qBAAO,QAAQ,KAAK,OAAO,KAAK,aAAa,SAAS,IAAI,MAAM,OAAO;AAAA,YACzE;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAIA,UAAI,gBAAgB,SAAS,QAAQ,SAAS;AAC5C,kBAAU,WAAW,CAAC;AACtB,YAAI,YAAY,QAAQ,aAAa;AACrC,YAAI,QAAQ,QAAQ,SAAS;AAE7B,eAAO,OAAO,MAAM,KAAK,EAAE,KAAK,SAAS;AAAA,MAC3C;AAEA,UAAI,WAAW,SAAS,QAAQ;AAC9B,YAAI,aAAa,MAAM,GAAG;AACxB,iBAAO;AAAA,QACT;AACA,iBAAS,OAAO,QAAQ,iBAAiB,SAAS,OAAO,KAAK;AAC5D,iBAAO,MAAM,IAAI,YAAY,IAAI;AAAA,QACnC,CAAC;AAED,eAAO,OAAO,OAAO,GAAG,CAAC,EAAE,YAAY,IAAI,OAAO,OAAO,CAAC;AAAA,MAC5D;AAEA,UAAI,YAAY,SAAS,QAAQ;AAC/B,YAAI,YAAY,SAAS,MAAM;AAE/B,eAAO,UAAU,OAAO,GAAG,CAAC,EAAE,YAAY,IAAI,UAAU,OAAO,CAAC;AAAA,MAClE;AAEA,UAAIC,cAAa,SAAS,QAAQ,SAAS;AACzC,eAAO,cAAc,QAAQ,OAAO,EAAE,YAAY;AAAA,MACpD;AAKA,UAAI,WAAW,OAAO,UAAU;AAEhC,UAAI,cAAc,SAAS,KAAK;AAC9B,eAAO,OAAO,QAAS;AAAA,MACzB;AACA,UAAI,YAAY,SAAS,KAAK;AAC5B,eAAO,QAAQ,OAAO,GAAG;AAAA,MAC3B;AACA,UAAI,WAAW,SAAS,KAAK;AAC3B,eAAO,SAAS,KAAK,GAAG,KAAK;AAAA,MAC/B;AACA,UAAI,UAAU,SAAS,KAAK;AAC1B,eAAO,SAAS,KAAK,GAAG,KAAK;AAAA,MAC/B;AACA,UAAI,YAAY,SAAS,KAAK;AAC5B,eAAO,SAAS,KAAK,GAAG,KAAK;AAAA,MAC/B;AACA,UAAI,aAAa,SAAS,KAAK;AAC7B,eAAO,SAAS,KAAK,GAAG,KAAK;AAAA,MAC/B;AAGA,UAAI,eAAe,SAAS,KAAK;AAC/B,cAAM,MAAM;AACZ,eAAO,QAAQ;AAAA,MACjB;AAIA,UAAI,aAAa,SAAS,SAAS,SAAS;AAC1C,YAAI,WAAW,WAAW,aAAa,UAAU,QAAQ,UAAU;AAEnE,YAAG,OAAO,aAAc,YAAY;AAClC,iBAAO;AAAA,QACT;AAEA,eAAO,SAAS,QAAQC,UAAS;AAC/B,iBAAO,SAAS,QAAQ,SAASA,QAAO;AAAA,QAC1C;AAAA,MACF;AAEA,UAAI,QAAQ;AAAA,QACV;AAAA,QACA,YAAYD;AAAA,QACZ;AAAA,QACA,aAAaA;AAAA,QACb,cAAc,SAAS,QAAQ,SAAS;AACtC,iBAAO,aAAa,WAAW,UAAU,OAAO,GAAG,MAAM;AAAA,QAC3D;AAAA,QACA,gBAAgB,SAAS,QAAQ,SAAS;AACxC,iBAAO,aAAa,WAAWA,aAAY,OAAO,GAAG,QAAQ,OAAO;AAAA,QACtE;AAAA,QACA,eAAe,SAAS,QAAQ,SAAS;AACvC,iBAAO,aAAa,WAAW,WAAW,OAAO,GAAG,MAAM;AAAA,QAC5D;AAAA,QACA,iBAAiB,WAAY;AAC3B,iBAAO,KAAK,eAAe,MAAM,MAAM,SAAS;AAAA,QAClD;AAAA,MACF;AAEA,UAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAC9C,eAAO,KAAK;AAAA,MACd,WAAW,OAAOD,YAAW,eAAeA,QAAO,SAAS;AAC1D,QAAAA,QAAO,UAAU;AAAA,MACnB,OAAO;AACL,eAAO,QAAQ;AAAA,MACjB;AAAA,IAEF,GAAG,OAAI;AAAA;AAAA;;;AC5IP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACIO,IAAK,WAAL,kBAAKG,cAAL;AACL,EAAAA,UAAA,UAAO;AACP,EAAAA,UAAA,SAAM;AACN,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,eAAY;AALF,SAAAA;AAAA,GAAA;;;ACJL,IAAK,WAAL,kBAAKC,cAAL;AACL,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,UAAO;AACP,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,iBAAc;AACd,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,cAAW;AACX,EAAAA,UAAA,eAAY;AACZ,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,UAAO;AACP,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,cAAW;AACX,EAAAA,UAAA,eAAY;AACZ,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,WAAQ;AAER,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,eAAY;AAEZ,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,eAAY;AACZ,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,cAAW;AACX,EAAAA,UAAA,mBAAgB;AAChB,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,WAAQ;AAER,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,YAAS;AAET,EAAAA,UAAA,eAAY;AACZ,EAAAA,UAAA,eAAY;AACZ,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,cAAW;AACX,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,mBAAgB;AAEhB,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,eAAY;AAEZ,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,iBAAc;AA5EJ,SAAAA;AAAA,GAAA;AA+EL,IAAK,YAAL,kBAAKC,eAAL;AACL,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,aAAU;AAHA,SAAAA;AAAA,GAAA;;;AC/EZ,mBAAyD;;;ACAlD,IAAM,uBAAuB,CAAC,QAAgB;AACnD,SAAO,IAAI,WAAW,GAAG,IAAI,IAAI,MAAM,CAAC,IAAI;AAC9C;;;ADGO,IAAM,eAAe;AAErB,IAAM,UAAU,CAAC,KAAa,WAAqC;AACxE,QAAM,UAAU,GAAG,eAAe,qBAAqB,GAAG;AAC1D,MAAI,CAAC;AAAQ,WAAO;AAEpB,QAAM,gCAA4B,6BAAe,MAAM;AAIvD,QAAM,eAAe,IAAI;AAAA,IACvB,OAAO,QAAQ,yBAAyB,EAAE;AAAA,MACxC,CAAC,CAAC,EAAE,KAAK,MAAM,UAAU;AAAA,IAC3B;AAAA,EACF,EAAE,SAAS;AACX,MAAI,CAAC;AAAc,WAAO;AAE1B,SAAO,GAAG,WAAW;AACvB;AAEO,IAAM,UAAU,OACrB,KACA,SAAkC,CAAC,GACnC,YACG;AACH,MAAI,SAAS;AACX,UAAMC,QAAO,MAAM,QAAQ,QAAQ,KAAK,MAAM,CAAC;AAC/C,eAAO,2BAAaA,KAAI;AAAA,EAC1B;AAEA,MAAI,OAAO,WAAW,UAAU,YAAY;AAC1C,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAGA,QAAM,MAAM,MAAM,WAAW,MAAM,QAAQ,KAAK,MAAM,CAAC;AAEvD,MAAI,CAAC,IAAI,MAAM,IAAI,UAAU,KAAK;AAChC,UAAM,IAAI,MAAM,GAAG,IAAI,UAAU,IAAI,YAAY;AAAA,EACnD;AAEA,QAAM,OAAO,MAAM,IAAI,KAAK;AAE5B,aAAO,2BAAa,IAAI;AAC1B;AAMO,IAAM,kBAAkB,CAC7B,UAAiC,CAAC,GAClCC,kBAA0C,CAAC,MACxC;AACH,QAAM,gBAAgB,EAAE,GAAG,QAAQ;AAGnC,MAAI,cAAc;AAAS,kBAAc,UAAU;AAEnD,QAAM,QAAiC;AAAA,IACrC,GAAGA;AAAA,IACH,GAAG;AAAA,EACL;AAEA,MAAI,MAAM,QAAQ;AAChB,UAAM,SAAmB,CAAC;AAC1B,WAAO,QAAQ,MAAM,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACrD,UAAI;AAAO,eAAO,SAAK,yBAAW,GAAG,CAAC;AAAA,IACxC,CAAC;AAGD,UAAM,SAAS,OAAO,KAAK,GAAG;AAAA,EAChC;AAEA,SAAO;AACT;;;AExEO,IAAM,gBAAgmBAAmB,CAAC,OAAyC;AACjE,QAAM,WAAW,OAAO,OAAO,WAAW,KAAK,OAAO,EAAE;AACxD,MAAI,CAAC,YAAY,YAAY,KAAK,WAAW;AAAK,WAAO;AACzD,SAAO;AACT;AAYA,IAAM,aAAa,CAAC,QAA2C;AAC7D,QAAM,YAAY,OAAO,QAAQ,WAAW,MAAM,OAAO,GAAG;AAC5D,MAAI,CAAC,aAAa,aAAa,KAAK,YAAY;AAAI,WAAO;AAC3D,SAAO;AACT;AAYA,IAAM,aAAa,CAAC,QAA2C;AAC7D,QAAM,YAAY,OAAO,QAAQ,WAAW,MAAM,OAAO,GAAG;AAC5D,MAAI,CAAC,aAAa,aAAa,KAAK,YAAY;AAAK,WAAO;AAC5D,SAAO;AACT;AAYA,IAAM,cAAc,CAAC,SAA8C;AACjE,QAAM,aAAa,OAAO,SAAS,WAAW,OAAO,OAAO,IAAI;AAChE,MAAI,CAAC,cAAc,cAAc,KAAK,aAAa;AAAI,WAAO;AAC9D,SAAO;AACT;AAYA,IAAM,mBAAmB,CAAC,SAA8C;AACtE,QAAM,aAAa,OAAO,SAAS,WAAW,OAAO,OAAO,IAAI;AAChE,MAAI,CAAC,cAAc,cAAc,KAAK,aAAa;AAAK,WAAO;AAC/D,SAAO;AACT;AAYA,IAAM,kBAAkB,CAAC,QAAiC;AACxD,QAAM,CAAC,WAAW,OAAO,IAAI,IAAI,KAAK,EAAE,MAAM,GAAG;AACjD,MAAI,CAAC,aAAa,CAAC,WAAW,CAAC,iBAAiB,SAAS;AAAG,WAAO;AAEnE,QAAM,cAAc,OAAO,OAAO;AAClC,QAAM,aAAc,cAAyC;AAC7D,MAAI,CAAC,eAAe,eAAe,KAAK,cAAc;AACpD,WAAO;AAET,SAAO;AACT;AAEA,IAAM,QAAQ;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAO,gBAAQ;;;ACvOf,IAAM,iBAAoC;AAAA,EACxC;AACF;AASA,IAAM,UAAU,OAAO,YAAgC;AACrD,QAAM,SAAS,gBAAgB,SAAS,cAAc;AACtD,QAAM,EAAE,UAAAC,UAAS,IAAI,MAAM;AAAA,IACzB;AAAA,IACA;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAOA;AACT;AAWA,IAAM,WAAW,OAAO,IAAe,YAAgC;AACrE,MAAI,CAAC,cAAM,iBAAiB,EAAE;AAAG,UAAM,IAAI,MAAM,oBAAoB;AAErE,QAAM,SAAS,gBAAgB,SAAS,cAAc;AACtD,QAAM,EAAE,QAAQ,IAAI,MAAM;AAAA,IACxB,aAAa;AAAA,IACb;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAO;AACT;AAWA,IAAM,eAAe,OAAO,IAAe,YAAgC;AACzE,MAAI,CAAC,cAAM,iBAAiB,EAAE;AAAG,UAAM,IAAI,MAAM,oBAAoB;AAErE,QAAM,SAAS,gBAAgB,SAAS,cAAc;AACtD,QAAM,EAAE,YAAY,IAAI,MAAM;AAAA,IAC5B,aAAa;AAAA,IACb;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAO;AACT;AAEA,IAAM,WAAW;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAO,mBAAQ;;;AClEf,IAAAC,gBAA2B;AAmB3B,IAAMF,kBAAkC;AAAA,EACtC;AAAA,EACA,SAAS;AAAA,EACT,OAAO;AACT;AAEA,IAAM,oBAAoB,CAAC,UAA2B,CAAC,MAAM;AAC3D,QAAM,SAAS,gBAAgB,SAASA,eAAc;AAGtD,MAAI,OAAO;AAAc,WAAO,eAAe,OAAO,aAAa,KAAK,GAAG;AAG3E,MAAI,OAAO;AAAS,WAAO,UAAU,OAAO,QAAQ,KAAK,GAAG;AAE5D,MAAI,OAAO,YAAY;AACrB,UAAM,aAAuB,CAAC;AAC9B,WAAO,QAAQ,OAAO,UAAU,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC1D,UAAI;AAAO,mBAAW,SAAK,0BAAW,GAAG,CAAC;AAAA,IAC5C,CAAC;AACD,WAAO,aAAa,WAAW,KAAK,GAAG;AAAA,EACzC;AAEA,MAAI,OAAO,mBAAmB;AAC5B,UAAM,oBAA8B,CAAC;AACrC,WAAO,QAAQ,OAAO,iBAAiB,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACjE,UAAI;AAAO,0BAAkB,SAAK,0BAAW,GAAG,CAAC;AAAA,IACnD,CAAC;AACD,WAAO,oBAAoB,kBAAkB,KAAK,GAAG;AAAA,EACvD;AAGA,MAAI,OAAO,SAAS;AAClB,WAAO,QAAQ,OAAO;AACtB,WAAO,UAAU;AAAA,EACnB;AAEA,SAAO;AACT;AAWA,IAAM,YAAY,OAAO,KAAe,YAA8B;AACpE,MAAI,CAAC,cAAM,gBAAgB,GAAG;AAAG,UAAM,IAAI,MAAM,mBAAmB;AACpE,QAAM,SAAS,kBAAkB,OAAO;AACxC,QAAM,MAAM,kBAAkB;AAC9B,QAAM,EAAE,MAAM,IAAI,MAAM;AAAA,IACtB;AAAA,IACA;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAO;AACT;AAWA,IAAM,gBAAgB,OAAO,IAAe,YAA8B;AACxE,MAAI,CAAC,cAAM,iBAAiB,EAAE;AAAG,UAAM,IAAI,MAAM,oBAAoB;AACrE,QAAM,SAAS,kBAAkB,OAAO;AACxC,QAAM,MAAM,sBAAsB;AAClC,QAAM,EAAE,QAAAG,QAAO,IAAI,MAAM;AAAA,IACvB;AAAA,IACA;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAOA;AACT;AAWA,IAAM,aAAa,OAAO,MAAkB,YAA8B;AACxE,MAAI,CAAC,cAAM,iBAAiB,IAAI;AAAG,UAAM,IAAI,MAAM,cAAc;AAEjE,QAAM,SAAS,kBAAkB,OAAO;AACxC,QAAM,MAAM,mBAAmB;AAC/B,QAAM,EAAE,QAAAA,QAAO,IAAI,MAAM;AAAA,IACvB;AAAA,IACA;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAOA;AACT;AAWA,IAAM,YAAY,OAAO,KAAgB,YAA8B;AACrE,MAAI,CAAC,cAAM,WAAW,GAAG;AAAG,UAAM,IAAI,MAAM,aAAa;AAEzD,QAAM,SAAS,kBAAkB,OAAO;AACxC,QAAM,MAAM,kBAAkB;AAC9B,QAAM,EAAE,QAAAA,QAAO,IAAI,MAAM;AAAA,IACvB;AAAA,IACA;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAOA;AACT;AAWA,IAAM,aAAa,OAAO,MAAkB,YAA8B;AACxE,MAAI,CAAC,cAAM,YAAY,IAAI;AAAG,UAAM,IAAI,MAAM,cAAc;AAE5D,QAAM,SAAS,kBAAkB,OAAO;AACxC,QAAM,MAAM,mBAAmB;AAC/B,QAAM,EAAE,QAAAA,QAAO,IAAI,MAAM;AAAA,IACvB;AAAA,IACA;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAOA;AACT;AAWA,IAAM,YAAY,OAAO,KAAgB,YAA8B;AACrE,MAAI,CAAC,cAAM,WAAW,GAAG;AAAG,UAAM,IAAI,MAAM,aAAa;AAEzD,QAAM,SAAS,kBAAkB,OAAO;AACxC,QAAM,EAAE,QAAAA,QAAO,IAAI,MAAM;AAAA,IACvB,kBAAkB;AAAA,IAClB;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAOA;AACT;AASA,IAAM,aAAa,OAAO,YAA8B;AACtD,QAAM,SAAS,kBAAkB,OAAO;AACxC,QAAM,EAAE,MAAM,IAAI,MAAM;AAAA,IACtB;AAAA,IACA;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAO;AACT;AAEA,IAAM,SAAS;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAO,iBAAQ;;;ACjOf,IAAMC,WAAU,OAAO,YAA+C;AACpE,QAAM,EAAE,MAAAC,MAAK,IAAI,MAAM;AAAA,IACrB;AAAA,IACA;AAAA,IACA,mCAAS;AAAA,EACX;AACA,SAAOA;AACT;AAEA,IAAM,OAAO,EAAE,SAAAD,SAAQ;AAEvB,IAAO,eAAQ;;;ACFf,IAAM,mCAAgE;AAAA,EACpE;AACF;AAQA,IAAM,iCAA4D;AAAA,EAChE;AACF;AAUA,IAAM,4BAA4B,OAChC,WACA,YACG;AACH,QAAM,SAAS,gBAAgB,SAAS,gCAAgC;AACxE,QAAM,EAAE,WAAW,IAAI,MAAM;AAAA,IAC3B,wBAAwB;AAAA,IACxB;AAAA,IACA,mCAAS;AAAA,EACX;AACA,SAAO;AACT;AAWA,IAAM,4BAA4B,OAChC,WACA,WACA,YACG;AACH,MAAI,CAAC,cAAM,iBAAiB,SAAS;AAAG,UAAM,IAAI,MAAM,oBAAoB;AAE5E,QAAM,SAAS,gBAAgB,SAAS,gCAAgC;AACxE,QAAM,EAAE,UAAU,IAAI,MAAM;AAAA,IAC1B,wBAAwB,aAAa;AAAA,IACrC;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAO;AACT;AAWA,IAAM,gCAAgC,OACpC,WACA,cACA,YACG;AACH,MAAI,CAAC,cAAM,iBAAiB,SAAS;AAAG,UAAM,IAAI,MAAM,oBAAoB;AAE5E,QAAM,SAAS,gBAAgB,SAAS,8BAA8B;AACtE,QAAM,OAAO,MAAM;AAAA,IAIjB,gBAAgB,2BAA2B;AAAA,IAC3C;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAO;AACT;AAWA,IAAM,4BAA4B,OAChC,KACA,cACA,YACG;AACH,MAAI,CAAC,cAAM,WAAW,GAAG;AAAG,UAAM,IAAI,MAAM,aAAa;AAEzD,QAAM,SAAS,gBAAgB,SAAS,8BAA8B;AACtE,QAAM,OAAO,MAAM,QAGhB,gBAAgB,uBAAuB,OAAO,QAAQ,mCAAS,OAAO;AAEzE,SAAO;AACT;AAWA,IAAM,6BAA6B,OACjC,MACA,cACA,YACG;AACH,MAAI,CAAC,cAAM,iBAAiB,IAAI;AAAG,UAAM,IAAI,MAAM,cAAc;AAEjE,QAAM,SAAS,gBAAgB,SAAS,8BAA8B;AACtE,QAAM,OAAO,MAAM,QAGhB,gBAAgB,wBAAwB,QAAQ,QAAQ,mCAAS,OAAO;AAE3E,SAAO;AACT;AAWA,IAAM,4BAA4B,OAChC,KACA,cACA,YACG;AACH,MAAI,CAAC,cAAM,WAAW,GAAG;AAAG,UAAM,IAAI,MAAM,aAAa;AAEzD,QAAM,SAAS,gBAAgB,SAAS,8BAA8B;AACtE,QAAM,OAAO,MAAM,QAGhB,gBAAgB,uBAAuB,OAAO,QAAQ,mCAAS,OAAO;AAEzE,SAAO;AACT;AAWA,IAAM,6BAA6B,OACjC,MACA,cACA,YACG;AACH,MAAI,CAAC,cAAM,YAAY,IAAI;AAAG,UAAM,IAAI,MAAM,cAAc;AAE5D,QAAM,SAAS,gBAAgB,SAAS,8BAA8B;AACtE,QAAM,OAAO,MAAM,QAGhB,gBAAgB,wBAAwB,QAAQ,QAAQ,mCAAS,OAAO;AAE3E,SAAO;AACT;AAWA,IAAM,4BAA4B,OAChC,KACA,cACA,YACG;AACH,MAAI,CAAC,cAAM,gBAAgB,GAAG;AAAG,UAAM,IAAI,MAAM,mBAAmB;AAEpE,QAAM,SAAS,gBAAgB,SAAS,8BAA8B;AACtE,QAAM,OAAO,MAAM,QAGhB,gBAAgB,wBAAwB,OAAO,QAAQ,mCAAS,OAAO;AAE1E,SAAO;AACT;AAEA,IAAM,QAAQ;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAO,gBAAQ;;;AClOf,IAAMJ,kBAAqC;AAAA,EACzC;AACF;AASA,IAAM,qBAAqB,OAAO,YAAiC;AACjE,QAAM,SAAS,gBAAgB,OAAO;AACtC,QAAM,EAAE,YAAY,IAAI,MAAM,QAE3B,0BAA0B,QAAQ,mCAAS,OAAO;AAErD,SAAO;AACT;AAUA,IAAM,qBAAqB,OAAO,IAAY,YAAiC;AAC7E,QAAM,SAAS,gBAAgB,SAASA,eAAc;AACtD,QAAM,EAAE,KAAK,IAAI,MAAM,QAEpB,0BAA0B,WAAW,QAAQ,mCAAS,OAAO;AAEhE,SAAO;AACT;AASA,IAAM,sBAAsB,OAAO,YAAiC;AAClE,QAAM,SAAS,gBAAgB,SAASA,eAAc;AACtD,QAAM,EAAE,aAAa,IAAI,MAAM,QAE5B,2BAA2B,QAAQ,mCAAS,OAAO;AAEtD,SAAO;AACT;AAUA,IAAM,sBAAsB,OAC1B,IACA,YACG;AACH,QAAM,SAAS,gBAAgB,SAASA,eAAc;AACtD,QAAM,EAAE,KAAK,IAAI,MAAM,QAEpB,2BAA2B,WAAW,QAAQ,mCAAS,OAAO;AAEjE,SAAO;AACT;AASA,IAAM,iBAAiB,OAAO,YAAiC;AAC7D,QAAM,SAAS,gBAAgB,SAASA,eAAc;AACtD,QAAM,EAAE,QAAQ,IAAI,MAAM,QAEvB,sBAAsB,QAAQ,mCAAS,OAAO;AAEjD,SAAO;AACT;AAUA,IAAM,iBAAiB,OAAO,IAAY,YAAiC;AACzE,QAAM,SAAS,gBAAgB,SAASA,eAAc;AACtD,QAAM,EAAE,KAAK,IAAI,MAAM,QAEpB,sBAAsB,WAAW,QAAQ,mCAAS,OAAO;AAE5D,SAAO;AACT;AAQA,IAAM,0BAA0B,OAC9B,YACG;AACH,QAAM,EAAE,iBAAiB,IAAI,MAAM,QAEhC,gCAAgC,QAAW,mCAAS,OAAO;AAE9D,SAAO;AACT;AASA,IAAM,mBAAmB,OAAO,YAAiC;AAC/D,QAAM,SAAS,gBAAgB,SAASA,eAAc;AACtD,QAAM,EAAE,UAAU,IAAI,MAAM,QAEzB,wBAAwB,QAAQ,mCAAS,OAAO;AAEnD,SAAO;AACT;AASA,IAAM,sBAAsB,OAAO,YAAiC;AAClE,QAAM,SAAS,gBAAgB,SAASA,eAAc;AACtD,QAAM,EAAE,aAAa,IAAI,MAAM,QAE5B,4BAA4B,QAAQ,mCAAS,OAAO;AAEvD,SAAO;AACT;AASA,IAAM,iBAAiB,OAAO,YAAiC;AAC7D,QAAM,SAAS,gBAAgB,SAASA,eAAc;AACtD,QAAM,EAAE,WAAW,IAAI,MAAM,QAE1B,0BAA0B,QAAQ,mCAAS,OAAO;AAErD,SAAO;AACT;AASA,IAAM,yBAAyB,OAAO,YAAiC;AACrE,QAAM,SAAS,gBAAgB,SAASA,eAAc;AACtD,QAAM,EAAE,SAAS,IAAI,MAAM,QAExB,+BAA+B,QAAQ,mCAAS,OAAO;AAE1D,SAAO;AACT;AAEA,IAAM,YAAY;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAO,oBAAQ;;;AChNf,IAAM,uBAAsC;AAAA,EAC1C;AAAA,EACA,MAAM;AACR;AAaA,IAAM,SAAS,OAAO,GAAW,YAA4B;AAC3D,QAAM,SAAS,gBAAgB,EAAE,GAAG,GAAG,QAAQ,GAAG,oBAAoB;AACtE,QAAM,EAAE,QAAAM,QAAO,IAAI,MAAM;AAAA,IACvB;AAAA,IACA;AAAA,IACA,mCAAS;AAAA,EACX;AAEA,SAAOA;AACT;AAEA,IAAM,YAAY,EAAE,OAAO;AAE3B,IAAO,iBAAQ;;;ACjCf,IAAM,KAAK;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAO,aAAQ;;;ACbf,IAAM,QAAQ;AAAA,EACZ;AAAA,EACA;AACF;AAEA,IAAO,cAAQ","sourcesContent":["// =========\n// = humps =\n// =========\n// Underscore-to-camelCase converter (and vice versa)\n// for strings and object keys\n\n// humps is copyright © 2012+ Dom Christie\n// Released under the MIT license.\n\n\n;(function(global) {\n\n  var _processKeys = function(convert, obj, options) {\n    if(!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {\n      return obj;\n    }\n\n    var output,\n        i = 0,\n        l = 0;\n\n    if(_isArray(obj)) {\n      output = [];\n      for(l=obj.length; i<l; i++) {\n        output.push(_processKeys(convert, obj[i], options));\n      }\n    }\n    else {\n      output = {};\n      for(var key in obj) {\n        if(Object.prototype.hasOwnProperty.call(obj, key)) {\n          output[convert(key, options)] = _processKeys(convert, obj[key], options);\n        }\n      }\n    }\n    return output;\n  };\n\n  // String conversion methods\n\n  var separateWords = function(string, options) {\n    options = options || {};\n    var separator = options.separator || '_';\n    var split = options.split || /(?=[A-Z])/;\n\n    return string.split(split).join(separator);\n  };\n\n  var camelize = function(string) {\n    if (_isNumerical(string)) {\n      return string;\n    }\n    string = string.replace(/[\\-_\\s]+(.)?/g, function(match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n    // Ensure 1st char is always lowercase\n    return string.substr(0, 1).toLowerCase() + string.substr(1);\n  };\n\n  var pascalize = function(string) {\n    var camelized = camelize(string);\n    // Ensure 1st char is always uppercase\n    return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);\n  };\n\n  var decamelize = function(string, options) {\n    return separateWords(string, options).toLowerCase();\n  };\n\n  // Utilities\n  // Taken from Underscore.js\n\n  var toString = Object.prototype.toString;\n\n  var _isFunction = function(obj) {\n    return typeof(obj) === 'function';\n  };\n  var _isObject = function(obj) {\n    return obj === Object(obj);\n  };\n  var _isArray = function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n  var _isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n  var _isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n  var _isBoolean = function(obj) {\n    return toString.call(obj) == '[object Boolean]';\n  };\n\n  // Performant way to determine if obj coerces to a number\n  var _isNumerical = function(obj) {\n    obj = obj - 0;\n    return obj === obj;\n  };\n\n  // Sets up function which handles processing keys\n  // allowing the convert function to be modified by a callback\n  var _processor = function(convert, options) {\n    var callback = options && 'process' in options ? options.process : options;\n\n    if(typeof(callback) !== 'function') {\n      return convert;\n    }\n\n    return function(string, options) {\n      return callback(string, convert, options);\n    }\n  };\n\n  var humps = {\n    camelize: camelize,\n    decamelize: decamelize,\n    pascalize: pascalize,\n    depascalize: decamelize,\n    camelizeKeys: function(object, options) {\n      return _processKeys(_processor(camelize, options), object);\n    },\n    decamelizeKeys: function(object, options) {\n      return _processKeys(_processor(decamelize, options), object, options);\n    },\n    pascalizeKeys: function(object, options) {\n      return _processKeys(_processor(pascalize, options), object);\n    },\n    depascalizeKeys: function () {\n      return this.decamelizeKeys.apply(this, arguments);\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(humps);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = humps;\n  } else {\n    global.humps = humps;\n  }\n\n})(this);\n","export { default as quran } from './sdk';\nexport * from './types';\n","import { VerseKey } from '../VerseKey';\nimport { Translation } from './Translation';\nimport { Transliteration } from './Transliteration';\n\nexport enum CharType {\n  Word = 'word',\n  End = 'end',\n  Pause = 'pause',\n  Sajdah = 'sajdah',\n  RubElHizb = 'rub-el-hizb',\n}\n\nexport interface Word {\n  id?: number;\n  position: number;\n  audioUrl: string;\n  charTypeName: CharType;\n  codeV1?: string;\n  codeV2?: string;\n  pageNumber?: number;\n  lineNumber?: number;\n  text?: string;\n  textUthmani?: string;\n  textIndopak?: string;\n  textImlaei?: string;\n  translation: Translation;\n  transliteration: Transliteration;\n  location?: string; // chapter:verse:word\n  verseKey?: VerseKey;\n}\n","export enum Language {\n  ARABIC = 'ar',\n  ENGLISH = 'en',\n  URDU = 'ur',\n  BENGALI = 'bn',\n  TURKISH = 'tr',\n  SPANISH = 'es',\n  GERMAN = 'de',\n  BOSNIAN = 'bs',\n  RUSSIAN = 'ru',\n  ALBANIAN_AL = 'al',\n  FRENCH = 'fr',\n  DUTCH = 'nl',\n  TAMIL = 'ta',\n  TAJIK = 'tg',\n  INDONESIAN = 'id',\n  UZBEK = 'uz',\n  VIETNAMESE = 'vi',\n  CHINESE = 'zh',\n  ITALIAN = 'it',\n  JAPANESE = 'ja',\n  MALAYALAM = 'ml',\n  AMHARIC = 'am',\n  KAZAKH = 'kk',\n  PORTUGUESE = 'pt',\n  TAGALOG = 'tl',\n  THAI = 'th',\n  KOREAN = 'ko',\n  HINDI = 'hi',\n  KURDISH = 'ku',\n  HAUSA = 'ha',\n  AZERI = 'az',\n  SWAHILI = 'sw',\n  PERSIAN = 'fa',\n  SERBIAN = 'sr',\n  MARANAO = 'mrn',\n  AMAZIGH = 'zgh',\n  ASSAMESE = 'as',\n  BULGARIAN = 'bg',\n  CHECHEN = 'ce',\n  CZECH = 'cs',\n\n  DIVEHI = 'dv',\n  DHIVEHI = 'dv',\n  MALDIVIAN = 'dv',\n\n  FINNISH = 'fi',\n  GUJAARATI = 'gu',\n  HEBREW = 'he',\n  GEORGIAN = 'ka',\n  CENTRAL_KHMER = 'km',\n  GANDA = 'lg',\n  MARATHI = 'mr',\n  YORUBA = 'yo',\n  MALAY = 'ms',\n  NEPALI = 'ne',\n  SWEDISH = 'sv',\n  TELUGU = 'te',\n  TATAR = 'tt',\n\n  UIGHUR = 'ug',\n  UYGHUR = 'ug',\n\n  UKRAINIAN = 'uk',\n  NORWEGIAN = 'no',\n  OROMO = 'om',\n  POLISH = 'pl',\n  PASHTO = 'ps',\n  ROMANIAN = 'ro',\n  SINDHI = 'sd',\n  NORTHERN_SAMI = 'se',\n\n  SINHALA = 'si',\n  SINHALESE = 'si',\n\n  SOMALI = 'so',\n  ALBANIAN_SQ = 'sq',\n}\n\nexport enum QuranFont {\n  MadaniV1 = 'code_v1',\n  MadaniV2 = 'code_v2',\n  Uthmani = 'text_uthmani',\n}\n\nexport type VerseField =\n  | 'chapterId'\n  | 'textUthmani'\n  | 'textUthmaniSimple'\n  | 'textImlaei'\n  | 'textImlaeiSimple'\n  | 'textIndopak'\n  | 'textUthmaniTajweed'\n  | 'imageUrl'\n  | 'imageWidth'\n  | 'codeV1'\n  | 'codeV2'\n  | 'v1Page'\n  | 'v2Page';\n\nexport type WordField =\n  | 'v1Page'\n  | 'v2Page'\n  | 'textUthmani'\n  | 'textImlaei'\n  | 'textIndopak'\n  | 'verseKey'\n  | 'location'\n  | 'codeV1'\n  | 'codeV2';\n\nexport type TranslationField =\n  | 'resourceName'\n  | 'verseId'\n  | 'languageId'\n  | 'languageName'\n  | 'verseKey'\n  | 'chapterId'\n  | 'verseNumber'\n  | 'juzNumber'\n  | 'hizbNumber'\n  | 'rubNumber'\n  | 'pageNumber';\n\nexport type VerseRecitationField = 'id' | 'chapterId' | 'segments' | 'format';\n\nexport * from './VerseKey';\nexport * from './ChapterId';\nexport * from './HizbNumber';\nexport * from './JuzNumber';\nexport * from './PageNumber';\nexport * from './RubNumber';\n\nexport * from './api';\n\nexport * from './FetchFn';\n","import { camelizeKeys, decamelize, decamelizeKeys } from 'humps';\nimport { FetchFn } from '../../types';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\nimport { removeBeginningSlash } from '../../utils/misc';\n\nexport const API_BASE_URL = 'https://api.quran.com/api/v4/';\n\nexport const makeUrl = (url: string, params?: Record<string, unknown>) => {\n  const baseUrl = `${API_BASE_URL}${removeBeginningSlash(url)}`;\n  if (!params) return baseUrl;\n\n  const paramsWithDecamelizedKeys = decamelizeKeys(params) as Record<\n    string,\n    string\n  >;\n  const paramsString = new URLSearchParams(\n    Object.entries(paramsWithDecamelizedKeys).filter(\n      ([, value]) => value !== undefined\n    )\n  ).toString();\n  if (!paramsString) return baseUrl;\n\n  return `${baseUrl}?${paramsString}`;\n};\n\nexport const fetcher = async <T extends object>(\n  url: string,\n  params: Record<string, unknown> = {},\n  fetchFn?: FetchFn\n) => {\n  if (fetchFn) {\n    const json = await fetchFn(makeUrl(url, params));\n    return camelizeKeys(json) as T;\n  }\n\n  if (typeof globalThis.fetch !== 'function') {\n    throw new Error(\n      'Looks like there is no global fetch function. Take a look at https://quranjs.com/techniques#custom-fetcher for more info.'\n    );\n  }\n\n  // if there is no fetchFn, we use the global fetch\n  const res = await globalThis.fetch(makeUrl(url, params));\n\n  if (!res.ok || res.status >= 400) {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n\n  const json = await res.json();\n\n  return camelizeKeys(json) as T;\n};\n\ntype MergeApiOptionsObject = Pick<BaseApiOptions, 'fetchFn'> & {\n  fields?: Record<string, boolean>;\n} & Record<string, unknown>;\n\nexport const mergeApiOptions = (\n  options: MergeApiOptionsObject = {},\n  defaultOptions: Record<string, unknown> = {}\n) => {\n  const clonedOptions = { ...options };\n\n  // we can set it to undefined because `makeUrl` will filter it out\n  if (clonedOptions.fetchFn) clonedOptions.fetchFn = undefined;\n\n  const final: Record<string, unknown> = {\n    ...defaultOptions,\n    ...clonedOptions,\n  };\n\n  if (final.fields) {\n    const fields: string[] = [];\n    Object.entries(final.fields).forEach(([key, value]) => {\n      if (value) fields.push(decamelize(key));\n    });\n\n    // convert `fields` to a string sperated by commas\n    final.fields = fields.join(',');\n  }\n\n  return final;\n};\n","export const removeBeginningSlash = (url: string) => {\n  return url.startsWith('/') ? url.slice(1) : url;\n};\n","import {\n  ChapterId,\n  HizbNumber,\n  JuzNumber,\n  PageNumber,\n  RubNumber,\n  VerseKey,\n} from '../types';\n\n// this maps chapterNumber to verseCount\nexport const versesMapping = {\n  '1': 7,\n  '2': 286,\n  '3': 200,\n  '4': 176,\n  '5': 120,\n  '6': 165,\n  '7': 206,\n  '8': 75,\n  '9': 129,\n  '10': 109,\n  '11': 123,\n  '12': 111,\n  '13': 43,\n  '14': 52,\n  '15': 99,\n  '16': 128,\n  '17': 111,\n  '18': 110,\n  '19': 98,\n  '20': 135,\n  '21': 112,\n  '22': 78,\n  '23': 118,\n  '24': 64,\n  '25': 77,\n  '26': 227,\n  '27': 93,\n  '28': 88,\n  '29': 69,\n  '30': 60,\n  '31': 34,\n  '32': 30,\n  '33': 73,\n  '34': 54,\n  '35': 45,\n  '36': 83,\n  '37': 182,\n  '38': 88,\n  '39': 75,\n  '40': 85,\n  '41': 54,\n  '42': 53,\n  '43': 89,\n  '44': 59,\n  '45': 37,\n  '46': 35,\n  '47': 38,\n  '48': 29,\n  '49': 18,\n  '50': 45,\n  '51': 60,\n  '52': 49,\n  '53': 62,\n  '54': 55,\n  '55': 78,\n  '56': 96,\n  '57': 29,\n  '58': 22,\n  '59': 24,\n  '60': 13,\n  '61': 14,\n  '62': 11,\n  '63': 11,\n  '64': 18,\n  '65': 12,\n  '66': 12,\n  '67': 30,\n  '68': 52,\n  '69': 52,\n  '70': 44,\n  '71': 28,\n  '72': 28,\n  '73': 20,\n  '74': 56,\n  '75': 40,\n  '76': 31,\n  '77': 50,\n  '78': 40,\n  '79': 46,\n  '80': 42,\n  '81': 29,\n  '82': 19,\n  '83': 36,\n  '84': 25,\n  '85': 22,\n  '86': 17,\n  '87': 19,\n  '88': 26,\n  '89': 30,\n  '90': 20,\n  '91': 15,\n  '92': 21,\n  '93': 11,\n  '94': 8,\n  '95': 8,\n  '96': 19,\n  '97': 5,\n  '98': 8,\n  '99': 8,\n  '100': 11,\n  '101': 11,\n  '102': 8,\n  '103': 3,\n  '104': 9,\n  '105': 5,\n  '106': 4,\n  '107': 7,\n  '108': 3,\n  '109': 6,\n  '110': 3,\n  '111': 5,\n  '112': 4,\n  '113': 5,\n  '114': 6,\n};\n\n/**\n * Validates chapter id\n * @param id chapter id\n * @example \n isValidChapterId('1') // true\n isValidChapterId('114') // true\n isValidChapterId('0') // false\n isValidChapterId('-1') // false\n isValidChapterId('200') // false\n */\nconst isValidChapterId = (id: string | number): id is ChapterId => {\n  const parsedId = typeof id === 'number' ? id : Number(id);\n  if (!parsedId || parsedId <= 0 || parsedId > 114) return false;\n  return true;\n};\n\n/**\n * Validates juz number\n * @param juz juz number\n * @example \n isValidJuz('1') // true\n isValidJuz('30') // true\n isValidJuz('0') // false\n isValidJuz('-1') // false\n isValidJuz('200') // false\n */\nconst isValidJuz = (juz: string | number): juz is JuzNumber => {\n  const parsedJuz = typeof juz === 'number' ? juz : Number(juz);\n  if (!parsedJuz || parsedJuz <= 0 || parsedJuz > 30) return false;\n  return true;\n};\n\n/**\n * Validates rub number\n * @param rub rub number\n * @example \n isValidRub('1') // true\n isValidRub('240') // true\n isValidRub('0') // false\n isValidRub('-1') // false\n isValidRub('300') // false\n */\nconst isValidRub = (rub: string | number): rub is RubNumber => {\n  const parsedRub = typeof rub === 'number' ? rub : Number(rub);\n  if (!parsedRub || parsedRub <= 0 || parsedRub > 240) return false;\n  return true;\n};\n\n/**\n * Validates hizb number\n * @param hizb hizb number\n * @example \n isValidHizb('1') // true\n isValidHizb('60') // true\n isValidHizb('0') // false\n isValidHizb('-1') // false\n isValidHizb('200') // false\n */\nconst isValidHizb = (hizb: string | number): hizb is HizbNumber => {\n  const parsedHizb = typeof hizb === 'number' ? hizb : Number(hizb);\n  if (!parsedHizb || parsedHizb <= 0 || parsedHizb > 60) return false;\n  return true;\n};\n\n/**\n * Validates mushaf page number\n * @param page mushaf page number\n * @example \n isValidQuranPage('1') // true\n isValidQuranPage('604') // true\n isValidQuranPage('0') // false\n isValidQuranPage('-1') // false\n isValidQuranPage('1000') // false\n */\nconst isValidQuranPage = (page: string | number): page is PageNumber => {\n  const parsedPage = typeof page === 'number' ? page : Number(page);\n  if (!parsedPage || parsedPage <= 0 || parsedPage > 604) return false;\n  return true;\n};\n\n/**\n * Validates verse key\n * @param key colon separated verse key (chapter:verse)\n * @example \n isValidVerseKey('1:1') // true\n isValidVerseKey('30:1') // true\n isValidVerseKey('0') // false\n isValidVerseKey('1:-') // false\n isValidVerseKey('1_1') // false\n */\nconst isValidVerseKey = (key: string): key is VerseKey => {\n  const [chapterId, verseId] = key.trim().split(':');\n  if (!chapterId || !verseId || !isValidChapterId(chapterId)) return false;\n\n  const parsedVerse = Number(verseId);\n  const verseCount = (versesMapping as Record<string, number>)[chapterId];\n  if (!parsedVerse || parsedVerse <= 0 || parsedVerse > verseCount)\n    return false;\n\n  return true;\n};\n\nconst utils = {\n  isValidChapterId,\n  isValidJuz,\n  isValidRub,\n  isValidHizb,\n  isValidQuranPage,\n  isValidVerseKey,\n};\n\nexport default utils;\n","import { Chapter, ChapterId, ChapterInfo, Language } from '../../types';\nimport { fetcher, mergeApiOptions } from './_fetcher';\nimport Utils from '../utils';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\n\ntype GetChapterOptions = Partial<BaseApiOptions>;\n\nconst defaultOptions: GetChapterOptions = {\n  language: Language.ARABIC,\n};\n\n/**\n * Get all chapters.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-chapters\n * @param {GetChapterOptions} options\n * @example\n * quran.v4.chapters.findAll()\n */\nconst findAll = async (options?: GetChapterOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { chapters } = await fetcher<{ chapters: Chapter[] }>(\n    '/chapters',\n    params,\n    options?.fetchFn\n  );\n\n  return chapters;\n};\n\n/**\n * Get chapter by id.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/get-chapter\n * @param {ChapterId} id chapter id, minimum 1, maximum 114\n * @param {GetChapterOptions} options\n * @example\n * quran.v4.chapters.findById('1')\n * quran.v4.chapters.findById('114')\n */\nconst findById = async (id: ChapterId, options?: GetChapterOptions) => {\n  if (!Utils.isValidChapterId(id)) throw new Error('Invalid chapter id');\n\n  const params = mergeApiOptions(options, defaultOptions);\n  const { chapter } = await fetcher<{ chapter: Chapter }>(\n    `/chapters/${id}`,\n    params,\n    options?.fetchFn\n  );\n\n  return chapter;\n};\n\n/**\n * Get chapter info by id.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/info\n * @param {ChapterId} id chapter id, minimum 1, maximum 114\n * @param {GetChapterOptions} options\n * @example\n * quran.v4.chapters.findInfoById('1')\n * quran.v4.chapters.findInfoById('114')\n */\nconst findInfoById = async (id: ChapterId, options?: GetChapterOptions) => {\n  if (!Utils.isValidChapterId(id)) throw new Error('Invalid chapter id');\n\n  const params = mergeApiOptions(options, defaultOptions);\n  const { chapterInfo } = await fetcher<{ chapterInfo: ChapterInfo }>(\n    `/chapters/${id}/info`,\n    params,\n    options?.fetchFn\n  );\n\n  return chapterInfo;\n};\n\nconst chapters = {\n  findAll,\n  findById,\n  findInfoById,\n};\n\nexport default chapters;\n","import {\n  ChapterId,\n  HizbNumber,\n  JuzNumber,\n  Language,\n  PageNumber,\n  RubNumber,\n  TranslationField,\n  Verse,\n  VerseField,\n  VerseKey,\n  WordField,\n} from '../../types';\nimport { decamelize } from 'humps';\nimport Utils from '../utils';\nimport { fetcher, mergeApiOptions } from './_fetcher';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\n\ntype GetVerseOptions = Partial<\n  BaseApiOptions & {\n    reciter: string | number;\n    words: boolean;\n    translations: string[] | number[];\n    tafsirs: string[] | number[];\n    wordFields: Partial<Record<WordField, boolean>>;\n    translationFields: Partial<Record<TranslationField, boolean>>;\n    fields: Partial<Record<VerseField, boolean>>;\n    page: number;\n    perPage: number;\n  }\n>;\n\nconst defaultOptions: GetVerseOptions = {\n  language: Language.ARABIC,\n  perPage: 50,\n  words: false,\n};\n\nconst mergeVerseOptions = (options: GetVerseOptions = {}) => {\n  const result = mergeApiOptions(options, defaultOptions);\n\n  // @ts-expect-error - we accept an array of strings, however, the API expects a comma separated string\n  if (result.translations) result.translations = result.translations.join(',');\n\n  // @ts-expect-error - we accept an array of strings, however, the API expects a comma separated string\n  if (result.tafsirs) result.tafsirs = result.tafsirs.join(',');\n\n  if (result.wordFields) {\n    const wordFields: string[] = [];\n    Object.entries(result.wordFields).forEach(([key, value]) => {\n      if (value) wordFields.push(decamelize(key));\n    });\n    result.wordFields = wordFields.join(',');\n  }\n\n  if (result.translationFields) {\n    const translationFields: string[] = [];\n    Object.entries(result.translationFields).forEach(([key, value]) => {\n      if (value) translationFields.push(decamelize(key));\n    });\n    result.translationFields = translationFields.join(',');\n  }\n\n  // rename `reciter` to `audio` because the API expects `audio`\n  if (result.reciter) {\n    result.audio = result.reciter;\n    result.reciter = undefined;\n  }\n\n  return result;\n};\n\n/**\n * Get a specific ayah with key. Key is combination of surah number and ayah number.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-verse-key\n * @param {VerseKey} key - surah number and ayah number separated by a colon.\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByKey('1:1')\n * quran.v4.verses.findByKey('101:5')\n */\nconst findByKey = async (key: VerseKey, options?: GetVerseOptions) => {\n  if (!Utils.isValidVerseKey(key)) throw new Error('Invalid verse key');\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_key/${key}`;\n  const { verse } = await fetcher<{ verse: Verse }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verse;\n};\n\n/**\n * Get all ayahs for a specific chapter (surah).\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-chapter-number\n * @param {ChapterId} id - chapter id (surah number)\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByChapter('1')\n * quran.v4.verses.findByChapter('101')\n */\nconst findByChapter = async (id: ChapterId, options?: GetVerseOptions) => {\n  if (!Utils.isValidChapterId(id)) throw new Error('Invalid chapter id');\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_chapter/${id}`;\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get all ayahs for a specific page in the Quran.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-page-number\n * @param {PageNumber} page - Quran page number\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByPage('1')\n * quran.v4.verses.findByPage('101')\n */\nconst findByPage = async (page: PageNumber, options?: GetVerseOptions) => {\n  if (!Utils.isValidQuranPage(page)) throw new Error('Invalid page');\n\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_page/${page}`;\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get all ayahs for a Juz.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-juz-number\n * @param {JuzNumber} juz - juz number\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByJuz('1')\n * quran.v4.verses.findByJuz('29')\n */\nconst findByJuz = async (juz: JuzNumber, options?: GetVerseOptions) => {\n  if (!Utils.isValidJuz(juz)) throw new Error('Invalid juz');\n\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_juz/${juz}`;\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get all ayahs for a Hizb.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-hizb-number\n * @param {HizbNumber} hizb - hizb number\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByHizb('1')\n * quran.v4.verses.findByHizb('29')\n */\nconst findByHizb = async (hizb: HizbNumber, options?: GetVerseOptions) => {\n  if (!Utils.isValidHizb(hizb)) throw new Error('Invalid hizb');\n\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_hizb/${hizb}`;\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get all ayahs for a Rub.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-rub-el-hizb-number\n * @param {RubNumber} rub - rub number\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByRub('1')\n * quran.v4.verses.findByRub('29')\n */\nconst findByRub = async (rub: RubNumber, options?: GetVerseOptions) => {\n  if (!Utils.isValidRub(rub)) throw new Error('Invalid rub');\n\n  const params = mergeVerseOptions(options);\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    `/verses/by_rub/${rub}`,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get a random ayah.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/random-verse\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findRandom()\n */\nconst findRandom = async (options?: GetVerseOptions) => {\n  const params = mergeVerseOptions(options);\n  const { verse } = await fetcher<{ verse: Verse }>(\n    '/verses/random',\n    params,\n    options?.fetchFn\n  );\n\n  return verse;\n};\n\nconst verses = {\n  findByKey,\n  findByChapter,\n  findByPage,\n  findByJuz,\n  findByHizb,\n  findByRub,\n  findRandom,\n};\n\nexport default verses;\n","import { Juz } from '../../types';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\nimport { fetcher } from './_fetcher';\n\n/**\n * Get All Juzs\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/juzs\n * @example\n * quran.v4.juzs.findAll()\n */\nconst findAll = async (options?: Omit<BaseApiOptions, 'language'>) => {\n  const { juzs } = await fetcher<{ juzs: Juz[] }>(\n    '/juzs',\n    undefined,\n    options?.fetchFn\n  );\n  return juzs;\n};\n\nconst juzs = { findAll };\n\nexport default juzs;\n","import {\n  ChapterRecitation,\n  VerseRecitation,\n  ChapterId,\n  HizbNumber,\n  JuzNumber,\n  Language,\n  PageNumber,\n  Pagination,\n  RubNumber,\n  VerseKey,\n  VerseRecitationField,\n} from '../../types';\nimport Utils from '../utils';\nimport { fetcher, mergeApiOptions } from './_fetcher';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\n\ntype GetChapterRecitationOptions = Partial<BaseApiOptions>;\n\nconst defaultChapterRecitationsOptions: GetChapterRecitationOptions = {\n  language: Language.ARABIC,\n};\n\ntype GetVerseRecitationOptions = Partial<\n  BaseApiOptions & {\n    fields: Partial<Record<VerseRecitationField, boolean>>;\n  }\n>;\n\nconst defaultVerseRecitationsOptions: GetVerseRecitationOptions = {\n  language: Language.ARABIC,\n};\n\n/**\n * Get all chapter recitations for specific reciter\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/chapter-reciter-audio-files\n * @param {string} reciterId\n * @param {GetChapterRecitationOptions} options\n * @example\n * quran.v4.audio.findAllChapterRecitations('2')\n */\nconst findAllChapterRecitations = async (\n  reciterId: string,\n  options?: GetChapterRecitationOptions\n) => {\n  const params = mergeApiOptions(options, defaultChapterRecitationsOptions);\n  const { audioFiles } = await fetcher<{ audioFiles: ChapterRecitation[] }>(\n    `/chapter_recitations/${reciterId}`,\n    params,\n    options?.fetchFn\n  );\n  return audioFiles;\n};\n\n/**\n * Get chapter recitation for specific reciter and a specific chapter\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/chapter-reciter-audio-file\n * @param {ChapterId} chapterId\n * @param {string} reciterId\n * @param {GetChapterRecitationOptions} options\n * @example\n * quran.v4.audio.findChapterRecitationById('1', '2') // first chapter recitation for reciter 2\n */\nconst findChapterRecitationById = async (\n  chapterId: ChapterId,\n  reciterId: string,\n  options?: GetChapterRecitationOptions\n) => {\n  if (!Utils.isValidChapterId(chapterId)) throw new Error('Invalid chapter id');\n\n  const params = mergeApiOptions(options, defaultChapterRecitationsOptions);\n  const { audioFile } = await fetcher<{ audioFile: ChapterRecitation }>(\n    `/chapter_recitations/${reciterId}/${chapterId}`,\n    params,\n    options?.fetchFn\n  );\n\n  return audioFile;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific chapter\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-surah-recitation\n * @param {ChapterId} chapterId\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByChapter('1', '2')\n */\nconst findVerseRecitationsByChapter = async (\n  chapterId: ChapterId,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidChapterId(chapterId)) throw new Error('Invalid chapter id');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(\n    `/recitations/${recitationId}/by_chapter/${chapterId}`,\n    params,\n    options?.fetchFn\n  );\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific juz\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-juz-recitaiton\n * @param {JuzNumber} juz\n * @param {string} recitationId\n * @param {GetRecitationsOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByJuz('1', '2')\n */\nconst findVerseRecitationsByJuz = async (\n  juz: JuzNumber,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidJuz(juz)) throw new Error('Invalid juz');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_juz/${juz}`, params, options?.fetchFn);\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific mushaf page\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-page-recitaiton\n * @param {PageNumber} page\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByPage('1', '2')\n */\nconst findVerseRecitationsByPage = async (\n  page: PageNumber,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidQuranPage(page)) throw new Error('Invalid page');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_page/${page}`, params, options?.fetchFn);\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific rub\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-rub-el-hizb-recitaiton\n * @param {RubNumber} rub\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByRub('1', '2')\n */\nconst findVerseRecitationsByRub = async (\n  rub: RubNumber,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidRub(rub)) throw new Error('Invalid rub');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_rub/${rub}`, params, options?.fetchFn);\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific hizb\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-hizb-recitaiton\n * @param {HizbNumber} hizb\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByHizb('1', '2')\n */\nconst findVerseRecitationsByHizb = async (\n  hizb: HizbNumber,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidHizb(hizb)) throw new Error('Invalid hizb');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_hizb/${hizb}`, params, options?.fetchFn);\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific verse\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-ayah-recitaiton\n * @param {VerseKey} key\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByKey('1:1', '2')\n */\nconst findVerseRecitationsByKey = async (\n  key: VerseKey,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidVerseKey(key)) throw new Error('Invalid verse key');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_ayah/${key}`, params, options?.fetchFn);\n\n  return data;\n};\n\nconst audio = {\n  findAllChapterRecitations,\n  findChapterRecitationById,\n  findVerseRecitationsByChapter,\n  findVerseRecitationsByJuz,\n  findVerseRecitationsByPage,\n  findVerseRecitationsByRub,\n  findVerseRecitationsByHizb,\n  findVerseRecitationsByKey,\n};\n\nexport default audio;\n","import {\n  ChapterInfoResource,\n  ChapterReciterResource,\n  Language,\n  LanguageResource,\n  RecitationInfoResource,\n  RecitationResource,\n  RecitationStylesResource,\n  TafsirInfoResource,\n  TafsirResource,\n  TranslationInfoResource,\n  TranslationResource,\n  VerseMediaResource,\n} from '../../types';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\nimport { fetcher, mergeApiOptions } from './_fetcher';\n\ntype GetResourceOptions = Partial<BaseApiOptions>;\n\nconst defaultOptions: GetResourceOptions = {\n  language: Language.ARABIC,\n};\n\n/**\n * Get all recitations.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/recitations\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllRecitations()\n */\nconst findAllRecitations = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options);\n  const { recitations } = await fetcher<{\n    recitations: RecitationResource[];\n  }>('/resources/recitations', params, options?.fetchFn);\n\n  return recitations;\n};\n\n/**\n * Get all recitation info.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/recitation-info\n * @param {string} id recitation id\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findRecitationInfo('1')\n */\nconst findRecitationInfo = async (id: string, options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { info } = await fetcher<{\n    info: RecitationInfoResource;\n  }>(`/resources/recitations/${id}/info`, params, options?.fetchFn);\n\n  return info;\n};\n\n/**\n * Get all translations.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/translations\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllTranslations()\n */\nconst findAllTranslations = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { translations } = await fetcher<{\n    translations: TranslationResource[];\n  }>('/resources/translations', params, options?.fetchFn);\n\n  return translations;\n};\n\n/**\n * Get translation info.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/translation-info\n * @param {string} id translation id\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findTranslationInfo('169')\n */\nconst findTranslationInfo = async (\n  id: string,\n  options?: GetResourceOptions\n) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { info } = await fetcher<{\n    info: TranslationInfoResource;\n  }>(`/resources/translations/${id}/info`, params, options?.fetchFn);\n\n  return info;\n};\n\n/**\n * Get all tafsirs.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/tafsirs\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllTafsirs()\n */\nconst findAllTafsirs = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { tafsirs } = await fetcher<{\n    tafsirs: TafsirResource[];\n  }>('/resources/tafsirs', params, options?.fetchFn);\n\n  return tafsirs;\n};\n\n/**\n * Get tafsir info.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/tafsir-info\n * @param {string} id tafsir id\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findTafsirInfo('1')\n */\nconst findTafsirInfo = async (id: string, options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { info } = await fetcher<{\n    info: TafsirInfoResource;\n  }>(`/resources/tafsirs/${id}/info`, params, options?.fetchFn);\n\n  return info;\n};\n\n/**\n * Get all recitation styles.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/recitation-styles\n * @example\n * quran.v4.resources.findAllRecitationStyles()\n */\nconst findAllRecitationStyles = async (\n  options?: Omit<BaseApiOptions, 'language'>\n) => {\n  const { recitationStyles } = await fetcher<{\n    recitationStyles: RecitationStylesResource;\n  }>('/resources/recitation_styles', undefined, options?.fetchFn);\n\n  return recitationStyles;\n};\n\n/**\n * Get all languages.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/languages\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllLanguages()\n */\nconst findAllLanguages = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { languages } = await fetcher<{\n    languages: LanguageResource[];\n  }>('/resources/languages', params, options?.fetchFn);\n\n  return languages;\n};\n\n/**\n * Get all chapter infos.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/chapter-info\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllChapterInfos()\n */\nconst findAllChapterInfos = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { chapterInfos } = await fetcher<{\n    chapterInfos: ChapterInfoResource[];\n  }>('/resources/chapter_infos', params, options?.fetchFn);\n\n  return chapterInfos;\n};\n\n/**\n * Get verse media.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verse-media\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findVerseMedia()\n */\nconst findVerseMedia = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { verseMedia } = await fetcher<{\n    verseMedia: VerseMediaResource;\n  }>(`/resources/verse_media`, params, options?.fetchFn);\n\n  return verseMedia;\n};\n\n/**\n * Get all chapter reciters.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/chapter-reciters\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllChapterReciters()\n */\nconst findAllChapterReciters = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { reciters } = await fetcher<{\n    reciters: ChapterReciterResource[];\n  }>(`/resources/chapter_reciters`, params, options?.fetchFn);\n\n  return reciters;\n};\n\nconst resources = {\n  findAllRecitations,\n  findAllTranslations,\n  findAllTafsirs,\n  findAllRecitationStyles,\n  findAllLanguages,\n  findVerseMedia,\n  findAllChapterReciters,\n  findAllChapterInfos,\n  findRecitationInfo,\n  findTranslationInfo,\n  findTafsirInfo,\n};\n\nexport default resources;\n","import { Language, SearchResponse } from '../../types';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\nimport { fetcher, mergeApiOptions } from './_fetcher';\n\ntype SearchOptions = Partial<\n  BaseApiOptions & {\n    size: number;\n    page: number;\n  }\n>;\n\nconst defaultSearchOptions: SearchOptions = {\n  language: Language.ARABIC,\n  size: 30,\n};\n\n/**\n * Search\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/search\n * @param {string} q search query\n * @param {SearchOptions} options\n * @example\n * quran.v4.search.search('نور')\n * quran.v4.search.search('نور', { language: Language.ENGLISH })\n * quran.v4.search.search('نور', { language: Language.ENGLISH, size: 10 })\n * quran.v4.search.search('نور', { language: Language.ENGLISH, page: 2 })\n */\nconst search = async (q: string, options?: SearchOptions) => {\n  const params = mergeApiOptions({ q, ...options }, defaultSearchOptions);\n  const { search } = await fetcher<SearchResponse>(\n    '/search',\n    params,\n    options?.fetchFn\n  );\n\n  return search;\n};\n\nconst searchApi = { search };\n\nexport default searchApi;\n","import chapters from './chapters';\nimport verses from './verses';\nimport juzs from './juzs';\nimport audio from './audio';\nimport resources from './resources';\nimport search from './search';\n\nconst v4 = {\n  chapters,\n  verses,\n  juzs,\n  audio,\n  resources,\n  search,\n};\n\nexport default v4;\n","import v4 from './v4';\nimport utils from './utils';\n\nconst quran = {\n  v4,\n  utils,\n};\n\nexport default quran;\n"]}