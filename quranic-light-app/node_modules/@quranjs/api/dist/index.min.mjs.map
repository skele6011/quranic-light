{"version":3,"sources":["../src/types/api/Word.ts","../src/types/index.ts","../src/sdk/v4/_fetcher.ts","../src/utils/misc.ts","../src/sdk/utils.ts","../src/sdk/v4/chapters.ts","../src/sdk/v4/verses.ts","../src/sdk/v4/juzs.ts","../src/sdk/v4/audio.ts","../src/sdk/v4/resources.ts","../src/sdk/v4/search.ts","../src/sdk/v4/index.ts","../src/sdk/index.ts"],"names":["CharType","Language","QuranFont","camelizeKeys","decamelize","decamelizeKeys","removeBeginningSlash","url","API_BASE_URL","makeUrl","params","baseUrl","paramsWithDecamelizedKeys","paramsString","value","fetcher","fetchFn","json","res","mergeApiOptions","options","defaultOptions","clonedOptions","final","fields","key","versesMapping","isValidChapterId","id","parsedId","isValidJuz","juz","parsedJuz","isValidRub","rub","parsedRub","isValidHizb","hizb","parsedHizb","isValidQuranPage","page","parsedPage","isValidVerseKey","chapterId","verseId","parsedVerse","verseCount","utils","utils_default","findAll","chapters","findById","chapter","findInfoById","chapterInfo","chapters_default","mergeVerseOptions","result","wordFields","translationFields","findByKey","verse","findByChapter","verses","findByPage","findByJuz","findByHizb","findByRub","findRandom","verses_default","juzs","juzs_default","defaultChapterRecitationsOptions","defaultVerseRecitationsOptions","findAllChapterRecitations","reciterId","audioFiles","findChapterRecitationById","audioFile","findVerseRecitationsByChapter","recitationId","findVerseRecitationsByJuz","findVerseRecitationsByPage","findVerseRecitationsByRub","findVerseRecitationsByHizb","findVerseRecitationsByKey","audio","audio_default","findAllRecitations","recitations","findRecitationInfo","info","findAllTranslations","translations","findTranslationInfo","findAllTafsirs","tafsirs","findTafsirInfo","findAllRecitationStyles","recitationStyles","findAllLanguages","languages","findAllChapterInfos","chapterInfos","findVerseMedia","verseMedia","findAllChapterReciters","reciters","resources","resources_default","defaultSearchOptions","search","q","searchApi","search_default","v4","v4_default","quran","sdk_default"],"mappings":"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AAO,KAAKpB,EAAWqB,CAAG,CAAC,CACxC,CAAC,EAGDF,EAAM,OAASC,EAAO,KAAK,GAAG,CAChC,CAEA,OAAOD,CACT,EExEO,IAAMG,EAAgB,CAC3B,EAAK,EACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,GACL,EAAK,IACL,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,IACN,GAAM,IACN,GAAM,IACN,GAAM,GACN,GAAM,IACN,GAAM,IACN,GAAM,GACN,GAAM,IACN,GAAM,GACN,GAAM,GACN,GAAM,IACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,IACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,GACN,GAAM,EACN,GAAM,EACN,GAAM,GACN,GAAM,EACN,GAAM,EACN,GAAM,EACN,IAAO,GACP,IAAO,GACP,IAAO,EACP,IAAO,EACP,IAAO,EACP,IAAO,EACP,IAAO,EACP,IAAO,EACP,IAAO,EACP,IAA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","sourcesContent":["import { VerseKey } from '../VerseKey';\nimport { Translation } from './Translation';\nimport { Transliteration } from './Transliteration';\n\nexport enum CharType {\n  Word = 'word',\n  End = 'end',\n  Pause = 'pause',\n  Sajdah = 'sajdah',\n  RubElHizb = 'rub-el-hizb',\n}\n\nexport interface Word {\n  id?: number;\n  position: number;\n  audioUrl: string;\n  charTypeName: CharType;\n  codeV1?: string;\n  codeV2?: string;\n  pageNumber?: number;\n  lineNumber?: number;\n  text?: string;\n  textUthmani?: string;\n  textIndopak?: string;\n  textImlaei?: string;\n  translation: Translation;\n  transliteration: Transliteration;\n  location?: string; // chapter:verse:word\n  verseKey?: VerseKey;\n}\n","export enum Language {\n  ARABIC = 'ar',\n  ENGLISH = 'en',\n  URDU = 'ur',\n  BENGALI = 'bn',\n  TURKISH = 'tr',\n  SPANISH = 'es',\n  GERMAN = 'de',\n  BOSNIAN = 'bs',\n  RUSSIAN = 'ru',\n  ALBANIAN_AL = 'al',\n  FRENCH = 'fr',\n  DUTCH = 'nl',\n  TAMIL = 'ta',\n  TAJIK = 'tg',\n  INDONESIAN = 'id',\n  UZBEK = 'uz',\n  VIETNAMESE = 'vi',\n  CHINESE = 'zh',\n  ITALIAN = 'it',\n  JAPANESE = 'ja',\n  MALAYALAM = 'ml',\n  AMHARIC = 'am',\n  KAZAKH = 'kk',\n  PORTUGUESE = 'pt',\n  TAGALOG = 'tl',\n  THAI = 'th',\n  KOREAN = 'ko',\n  HINDI = 'hi',\n  KURDISH = 'ku',\n  HAUSA = 'ha',\n  AZERI = 'az',\n  SWAHILI = 'sw',\n  PERSIAN = 'fa',\n  SERBIAN = 'sr',\n  MARANAO = 'mrn',\n  AMAZIGH = 'zgh',\n  ASSAMESE = 'as',\n  BULGARIAN = 'bg',\n  CHECHEN = 'ce',\n  CZECH = 'cs',\n\n  DIVEHI = 'dv',\n  DHIVEHI = 'dv',\n  MALDIVIAN = 'dv',\n\n  FINNISH = 'fi',\n  GUJAARATI = 'gu',\n  HEBREW = 'he',\n  GEORGIAN = 'ka',\n  CENTRAL_KHMER = 'km',\n  GANDA = 'lg',\n  MARATHI = 'mr',\n  YORUBA = 'yo',\n  MALAY = 'ms',\n  NEPALI = 'ne',\n  SWEDISH = 'sv',\n  TELUGU = 'te',\n  TATAR = 'tt',\n\n  UIGHUR = 'ug',\n  UYGHUR = 'ug',\n\n  UKRAINIAN = 'uk',\n  NORWEGIAN = 'no',\n  OROMO = 'om',\n  POLISH = 'pl',\n  PASHTO = 'ps',\n  ROMANIAN = 'ro',\n  SINDHI = 'sd',\n  NORTHERN_SAMI = 'se',\n\n  SINHALA = 'si',\n  SINHALESE = 'si',\n\n  SOMALI = 'so',\n  ALBANIAN_SQ = 'sq',\n}\n\nexport enum QuranFont {\n  MadaniV1 = 'code_v1',\n  MadaniV2 = 'code_v2',\n  Uthmani = 'text_uthmani',\n}\n\nexport type VerseField =\n  | 'chapterId'\n  | 'textUthmani'\n  | 'textUthmaniSimple'\n  | 'textImlaei'\n  | 'textImlaeiSimple'\n  | 'textIndopak'\n  | 'textUthmaniTajweed'\n  | 'imageUrl'\n  | 'imageWidth'\n  | 'codeV1'\n  | 'codeV2'\n  | 'v1Page'\n  | 'v2Page';\n\nexport type WordField =\n  | 'v1Page'\n  | 'v2Page'\n  | 'textUthmani'\n  | 'textImlaei'\n  | 'textIndopak'\n  | 'verseKey'\n  | 'location'\n  | 'codeV1'\n  | 'codeV2';\n\nexport type TranslationField =\n  | 'resourceName'\n  | 'verseId'\n  | 'languageId'\n  | 'languageName'\n  | 'verseKey'\n  | 'chapterId'\n  | 'verseNumber'\n  | 'juzNumber'\n  | 'hizbNumber'\n  | 'rubNumber'\n  | 'pageNumber';\n\nexport type VerseRecitationField = 'id' | 'chapterId' | 'segments' | 'format';\n\nexport * from './VerseKey';\nexport * from './ChapterId';\nexport * from './HizbNumber';\nexport * from './JuzNumber';\nexport * from './PageNumber';\nexport * from './RubNumber';\n\nexport * from './api';\n\nexport * from './FetchFn';\n","import { camelizeKeys, decamelize, decamelizeKeys } from 'humps';\nimport { FetchFn } from '../../types';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\nimport { removeBeginningSlash } from '../../utils/misc';\n\nexport const API_BASE_URL = 'https://api.quran.com/api/v4/';\n\nexport const makeUrl = (url: string, params?: Record<string, unknown>) => {\n  const baseUrl = `${API_BASE_URL}${removeBeginningSlash(url)}`;\n  if (!params) return baseUrl;\n\n  const paramsWithDecamelizedKeys = decamelizeKeys(params) as Record<\n    string,\n    string\n  >;\n  const paramsString = new URLSearchParams(\n    Object.entries(paramsWithDecamelizedKeys).filter(\n      ([, value]) => value !== undefined\n    )\n  ).toString();\n  if (!paramsString) return baseUrl;\n\n  return `${baseUrl}?${paramsString}`;\n};\n\nexport const fetcher = async <T extends object>(\n  url: string,\n  params: Record<string, unknown> = {},\n  fetchFn?: FetchFn\n) => {\n  if (fetchFn) {\n    const json = await fetchFn(makeUrl(url, params));\n    return camelizeKeys(json) as T;\n  }\n\n  if (typeof globalThis.fetch !== 'function') {\n    throw new Error(\n      'Looks like there is no global fetch function. Take a look at https://quranjs.com/techniques#custom-fetcher for more info.'\n    );\n  }\n\n  // if there is no fetchFn, we use the global fetch\n  const res = await globalThis.fetch(makeUrl(url, params));\n\n  if (!res.ok || res.status >= 400) {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n\n  const json = await res.json();\n\n  return camelizeKeys(json) as T;\n};\n\ntype MergeApiOptionsObject = Pick<BaseApiOptions, 'fetchFn'> & {\n  fields?: Record<string, boolean>;\n} & Record<string, unknown>;\n\nexport const mergeApiOptions = (\n  options: MergeApiOptionsObject = {},\n  defaultOptions: Record<string, unknown> = {}\n) => {\n  const clonedOptions = { ...options };\n\n  // we can set it to undefined because `makeUrl` will filter it out\n  if (clonedOptions.fetchFn) clonedOptions.fetchFn = undefined;\n\n  const final: Record<string, unknown> = {\n    ...defaultOptions,\n    ...clonedOptions,\n  };\n\n  if (final.fields) {\n    const fields: string[] = [];\n    Object.entries(final.fields).forEach(([key, value]) => {\n      if (value) fields.push(decamelize(key));\n    });\n\n    // convert `fields` to a string sperated by commas\n    final.fields = fields.join(',');\n  }\n\n  return final;\n};\n","export const removeBeginningSlash = (url: string) => {\n  return url.startsWith('/') ? url.slice(1) : url;\n};\n","import {\n  ChapterId,\n  HizbNumber,\n  JuzNumber,\n  PageNumber,\n  RubNumber,\n  VerseKey,\n} from '../types';\n\n// this maps chapterNumber to verseCount\nexport const versesMapping = {\n  '1': 7,\n  '2': 286,\n  '3': 200,\n  '4': 176,\n  '5': 120,\n  '6': 165,\n  '7': 206,\n  '8': 75,\n  '9': 129,\n  '10': 109,\n  '11': 123,\n  '12': 111,\n  '13': 43,\n  '14': 52,\n  '15': 99,\n  '16': 128,\n  '17': 111,\n  '18': 110,\n  '19': 98,\n  '20': 135,\n  '21': 112,\n  '22': 78,\n  '23': 118,\n  '24': 64,\n  '25': 77,\n  '26': 227,\n  '27': 93,\n  '28': 88,\n  '29': 69,\n  '30': 60,\n  '31': 34,\n  '32': 30,\n  '33': 73,\n  '34': 54,\n  '35': 45,\n  '36': 83,\n  '37': 182,\n  '38': 88,\n  '39': 75,\n  '40': 85,\n  '41': 54,\n  '42': 53,\n  '43': 89,\n  '44': 59,\n  '45': 37,\n  '46': 35,\n  '47': 38,\n  '48': 29,\n  '49': 18,\n  '50': 45,\n  '51': 60,\n  '52': 49,\n  '53': 62,\n  '54': 55,\n  '55': 78,\n  '56': 96,\n  '57': 29,\n  '58': 22,\n  '59': 24,\n  '60': 13,\n  '61': 14,\n  '62': 11,\n  '63': 11,\n  '64': 18,\n  '65': 12,\n  '66': 12,\n  '67': 30,\n  '68': 52,\n  '69': 52,\n  '70': 44,\n  '71': 28,\n  '72': 28,\n  '73': 20,\n  '74': 56,\n  '75': 40,\n  '76': 31,\n  '77': 50,\n  '78': 40,\n  '79': 46,\n  '80': 42,\n  '81': 29,\n  '82': 19,\n  '83': 36,\n  '84': 25,\n  '85': 22,\n  '86': 17,\n  '87': 19,\n  '88': 26,\n  '89': 30,\n  '90': 20,\n  '91': 15,\n  '92': 21,\n  '93': 11,\n  '94': 8,\n  '95': 8,\n  '96': 19,\n  '97': 5,\n  '98': 8,\n  '99': 8,\n  '100': 11,\n  '101': 11,\n  '102': 8,\n  '103': 3,\n  '104': 9,\n  '105': 5,\n  '106': 4,\n  '107': 7,\n  '108': 3,\n  '109': 6,\n  '110': 3,\n  '111': 5,\n  '112': 4,\n  '113': 5,\n  '114': 6,\n};\n\n/**\n * Validates chapter id\n * @param id chapter id\n * @example \n isValidChapterId('1') // true\n isValidChapterId('114') // true\n isValidChapterId('0') // false\n isValidChapterId('-1') // false\n isValidChapterId('200') // false\n */\nconst isValidChapterId = (id: string | number): id is ChapterId => {\n  const parsedId = typeof id === 'number' ? id : Number(id);\n  if (!parsedId || parsedId <= 0 || parsedId > 114) return false;\n  return true;\n};\n\n/**\n * Validates juz number\n * @param juz juz number\n * @example \n isValidJuz('1') // true\n isValidJuz('30') // true\n isValidJuz('0') // false\n isValidJuz('-1') // false\n isValidJuz('200') // false\n */\nconst isValidJuz = (juz: string | number): juz is JuzNumber => {\n  const parsedJuz = typeof juz === 'number' ? juz : Number(juz);\n  if (!parsedJuz || parsedJuz <= 0 || parsedJuz > 30) return false;\n  return true;\n};\n\n/**\n * Validates rub number\n * @param rub rub number\n * @example \n isValidRub('1') // true\n isValidRub('240') // true\n isValidRub('0') // false\n isValidRub('-1') // false\n isValidRub('300') // false\n */\nconst isValidRub = (rub: string | number): rub is RubNumber => {\n  const parsedRub = typeof rub === 'number' ? rub : Number(rub);\n  if (!parsedRub || parsedRub <= 0 || parsedRub > 240) return false;\n  return true;\n};\n\n/**\n * Validates hizb number\n * @param hizb hizb number\n * @example \n isValidHizb('1') // true\n isValidHizb('60') // true\n isValidHizb('0') // false\n isValidHizb('-1') // false\n isValidHizb('200') // false\n */\nconst isValidHizb = (hizb: string | number): hizb is HizbNumber => {\n  const parsedHizb = typeof hizb === 'number' ? hizb : Number(hizb);\n  if (!parsedHizb || parsedHizb <= 0 || parsedHizb > 60) return false;\n  return true;\n};\n\n/**\n * Validates mushaf page number\n * @param page mushaf page number\n * @example \n isValidQuranPage('1') // true\n isValidQuranPage('604') // true\n isValidQuranPage('0') // false\n isValidQuranPage('-1') // false\n isValidQuranPage('1000') // false\n */\nconst isValidQuranPage = (page: string | number): page is PageNumber => {\n  const parsedPage = typeof page === 'number' ? page : Number(page);\n  if (!parsedPage || parsedPage <= 0 || parsedPage > 604) return false;\n  return true;\n};\n\n/**\n * Validates verse key\n * @param key colon separated verse key (chapter:verse)\n * @example \n isValidVerseKey('1:1') // true\n isValidVerseKey('30:1') // true\n isValidVerseKey('0') // false\n isValidVerseKey('1:-') // false\n isValidVerseKey('1_1') // false\n */\nconst isValidVerseKey = (key: string): key is VerseKey => {\n  const [chapterId, verseId] = key.trim().split(':');\n  if (!chapterId || !verseId || !isValidChapterId(chapterId)) return false;\n\n  const parsedVerse = Number(verseId);\n  const verseCount = (versesMapping as Record<string, number>)[chapterId];\n  if (!parsedVerse || parsedVerse <= 0 || parsedVerse > verseCount)\n    return false;\n\n  return true;\n};\n\nconst utils = {\n  isValidChapterId,\n  isValidJuz,\n  isValidRub,\n  isValidHizb,\n  isValidQuranPage,\n  isValidVerseKey,\n};\n\nexport default utils;\n","import { Chapter, ChapterId, ChapterInfo, Language } from '../../types';\nimport { fetcher, mergeApiOptions } from './_fetcher';\nimport Utils from '../utils';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\n\ntype GetChapterOptions = Partial<BaseApiOptions>;\n\nconst defaultOptions: GetChapterOptions = {\n  language: Language.ARABIC,\n};\n\n/**\n * Get all chapters.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-chapters\n * @param {GetChapterOptions} options\n * @example\n * quran.v4.chapters.findAll()\n */\nconst findAll = async (options?: GetChapterOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { chapters } = await fetcher<{ chapters: Chapter[] }>(\n    '/chapters',\n    params,\n    options?.fetchFn\n  );\n\n  return chapters;\n};\n\n/**\n * Get chapter by id.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/get-chapter\n * @param {ChapterId} id chapter id, minimum 1, maximum 114\n * @param {GetChapterOptions} options\n * @example\n * quran.v4.chapters.findById('1')\n * quran.v4.chapters.findById('114')\n */\nconst findById = async (id: ChapterId, options?: GetChapterOptions) => {\n  if (!Utils.isValidChapterId(id)) throw new Error('Invalid chapter id');\n\n  const params = mergeApiOptions(options, defaultOptions);\n  const { chapter } = await fetcher<{ chapter: Chapter }>(\n    `/chapters/${id}`,\n    params,\n    options?.fetchFn\n  );\n\n  return chapter;\n};\n\n/**\n * Get chapter info by id.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/info\n * @param {ChapterId} id chapter id, minimum 1, maximum 114\n * @param {GetChapterOptions} options\n * @example\n * quran.v4.chapters.findInfoById('1')\n * quran.v4.chapters.findInfoById('114')\n */\nconst findInfoById = async (id: ChapterId, options?: GetChapterOptions) => {\n  if (!Utils.isValidChapterId(id)) throw new Error('Invalid chapter id');\n\n  const params = mergeApiOptions(options, defaultOptions);\n  const { chapterInfo } = await fetcher<{ chapterInfo: ChapterInfo }>(\n    `/chapters/${id}/info`,\n    params,\n    options?.fetchFn\n  );\n\n  return chapterInfo;\n};\n\nconst chapters = {\n  findAll,\n  findById,\n  findInfoById,\n};\n\nexport default chapters;\n","import {\n  ChapterId,\n  HizbNumber,\n  JuzNumber,\n  Language,\n  PageNumber,\n  RubNumber,\n  TranslationField,\n  Verse,\n  VerseField,\n  VerseKey,\n  WordField,\n} from '../../types';\nimport { decamelize } from 'humps';\nimport Utils from '../utils';\nimport { fetcher, mergeApiOptions } from './_fetcher';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\n\ntype GetVerseOptions = Partial<\n  BaseApiOptions & {\n    reciter: string | number;\n    words: boolean;\n    translations: string[] | number[];\n    tafsirs: string[] | number[];\n    wordFields: Partial<Record<WordField, boolean>>;\n    translationFields: Partial<Record<TranslationField, boolean>>;\n    fields: Partial<Record<VerseField, boolean>>;\n    page: number;\n    perPage: number;\n  }\n>;\n\nconst defaultOptions: GetVerseOptions = {\n  language: Language.ARABIC,\n  perPage: 50,\n  words: false,\n};\n\nconst mergeVerseOptions = (options: GetVerseOptions = {}) => {\n  const result = mergeApiOptions(options, defaultOptions);\n\n  // @ts-expect-error - we accept an array of strings, however, the API expects a comma separated string\n  if (result.translations) result.translations = result.translations.join(',');\n\n  // @ts-expect-error - we accept an array of strings, however, the API expects a comma separated string\n  if (result.tafsirs) result.tafsirs = result.tafsirs.join(',');\n\n  if (result.wordFields) {\n    const wordFields: string[] = [];\n    Object.entries(result.wordFields).forEach(([key, value]) => {\n      if (value) wordFields.push(decamelize(key));\n    });\n    result.wordFields = wordFields.join(',');\n  }\n\n  if (result.translationFields) {\n    const translationFields: string[] = [];\n    Object.entries(result.translationFields).forEach(([key, value]) => {\n      if (value) translationFields.push(decamelize(key));\n    });\n    result.translationFields = translationFields.join(',');\n  }\n\n  // rename `reciter` to `audio` because the API expects `audio`\n  if (result.reciter) {\n    result.audio = result.reciter;\n    result.reciter = undefined;\n  }\n\n  return result;\n};\n\n/**\n * Get a specific ayah with key. Key is combination of surah number and ayah number.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-verse-key\n * @param {VerseKey} key - surah number and ayah number separated by a colon.\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByKey('1:1')\n * quran.v4.verses.findByKey('101:5')\n */\nconst findByKey = async (key: VerseKey, options?: GetVerseOptions) => {\n  if (!Utils.isValidVerseKey(key)) throw new Error('Invalid verse key');\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_key/${key}`;\n  const { verse } = await fetcher<{ verse: Verse }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verse;\n};\n\n/**\n * Get all ayahs for a specific chapter (surah).\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-chapter-number\n * @param {ChapterId} id - chapter id (surah number)\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByChapter('1')\n * quran.v4.verses.findByChapter('101')\n */\nconst findByChapter = async (id: ChapterId, options?: GetVerseOptions) => {\n  if (!Utils.isValidChapterId(id)) throw new Error('Invalid chapter id');\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_chapter/${id}`;\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get all ayahs for a specific page in the Quran.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-page-number\n * @param {PageNumber} page - Quran page number\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByPage('1')\n * quran.v4.verses.findByPage('101')\n */\nconst findByPage = async (page: PageNumber, options?: GetVerseOptions) => {\n  if (!Utils.isValidQuranPage(page)) throw new Error('Invalid page');\n\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_page/${page}`;\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get all ayahs for a Juz.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-juz-number\n * @param {JuzNumber} juz - juz number\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByJuz('1')\n * quran.v4.verses.findByJuz('29')\n */\nconst findByJuz = async (juz: JuzNumber, options?: GetVerseOptions) => {\n  if (!Utils.isValidJuz(juz)) throw new Error('Invalid juz');\n\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_juz/${juz}`;\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get all ayahs for a Hizb.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-hizb-number\n * @param {HizbNumber} hizb - hizb number\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByHizb('1')\n * quran.v4.verses.findByHizb('29')\n */\nconst findByHizb = async (hizb: HizbNumber, options?: GetVerseOptions) => {\n  if (!Utils.isValidHizb(hizb)) throw new Error('Invalid hizb');\n\n  const params = mergeVerseOptions(options);\n  const url = `/verses/by_hizb/${hizb}`;\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    url,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get all ayahs for a Rub.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verses-by-rub-el-hizb-number\n * @param {RubNumber} rub - rub number\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findByRub('1')\n * quran.v4.verses.findByRub('29')\n */\nconst findByRub = async (rub: RubNumber, options?: GetVerseOptions) => {\n  if (!Utils.isValidRub(rub)) throw new Error('Invalid rub');\n\n  const params = mergeVerseOptions(options);\n  const { verses } = await fetcher<{ verses: Verse[] }>(\n    `/verses/by_rub/${rub}`,\n    params,\n    options?.fetchFn\n  );\n\n  return verses;\n};\n\n/**\n * Get a random ayah.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/random-verse\n * @param {GetVerseOptions} options\n * @example\n * quran.v4.verses.findRandom()\n */\nconst findRandom = async (options?: GetVerseOptions) => {\n  const params = mergeVerseOptions(options);\n  const { verse } = await fetcher<{ verse: Verse }>(\n    '/verses/random',\n    params,\n    options?.fetchFn\n  );\n\n  return verse;\n};\n\nconst verses = {\n  findByKey,\n  findByChapter,\n  findByPage,\n  findByJuz,\n  findByHizb,\n  findByRub,\n  findRandom,\n};\n\nexport default verses;\n","import { Juz } from '../../types';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\nimport { fetcher } from './_fetcher';\n\n/**\n * Get All Juzs\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/juzs\n * @example\n * quran.v4.juzs.findAll()\n */\nconst findAll = async (options?: Omit<BaseApiOptions, 'language'>) => {\n  const { juzs } = await fetcher<{ juzs: Juz[] }>(\n    '/juzs',\n    undefined,\n    options?.fetchFn\n  );\n  return juzs;\n};\n\nconst juzs = { findAll };\n\nexport default juzs;\n","import {\n  ChapterRecitation,\n  VerseRecitation,\n  ChapterId,\n  HizbNumber,\n  JuzNumber,\n  Language,\n  PageNumber,\n  Pagination,\n  RubNumber,\n  VerseKey,\n  VerseRecitationField,\n} from '../../types';\nimport Utils from '../utils';\nimport { fetcher, mergeApiOptions } from './_fetcher';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\n\ntype GetChapterRecitationOptions = Partial<BaseApiOptions>;\n\nconst defaultChapterRecitationsOptions: GetChapterRecitationOptions = {\n  language: Language.ARABIC,\n};\n\ntype GetVerseRecitationOptions = Partial<\n  BaseApiOptions & {\n    fields: Partial<Record<VerseRecitationField, boolean>>;\n  }\n>;\n\nconst defaultVerseRecitationsOptions: GetVerseRecitationOptions = {\n  language: Language.ARABIC,\n};\n\n/**\n * Get all chapter recitations for specific reciter\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/chapter-reciter-audio-files\n * @param {string} reciterId\n * @param {GetChapterRecitationOptions} options\n * @example\n * quran.v4.audio.findAllChapterRecitations('2')\n */\nconst findAllChapterRecitations = async (\n  reciterId: string,\n  options?: GetChapterRecitationOptions\n) => {\n  const params = mergeApiOptions(options, defaultChapterRecitationsOptions);\n  const { audioFiles } = await fetcher<{ audioFiles: ChapterRecitation[] }>(\n    `/chapter_recitations/${reciterId}`,\n    params,\n    options?.fetchFn\n  );\n  return audioFiles;\n};\n\n/**\n * Get chapter recitation for specific reciter and a specific chapter\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/chapter-reciter-audio-file\n * @param {ChapterId} chapterId\n * @param {string} reciterId\n * @param {GetChapterRecitationOptions} options\n * @example\n * quran.v4.audio.findChapterRecitationById('1', '2') // first chapter recitation for reciter 2\n */\nconst findChapterRecitationById = async (\n  chapterId: ChapterId,\n  reciterId: string,\n  options?: GetChapterRecitationOptions\n) => {\n  if (!Utils.isValidChapterId(chapterId)) throw new Error('Invalid chapter id');\n\n  const params = mergeApiOptions(options, defaultChapterRecitationsOptions);\n  const { audioFile } = await fetcher<{ audioFile: ChapterRecitation }>(\n    `/chapter_recitations/${reciterId}/${chapterId}`,\n    params,\n    options?.fetchFn\n  );\n\n  return audioFile;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific chapter\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-surah-recitation\n * @param {ChapterId} chapterId\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByChapter('1', '2')\n */\nconst findVerseRecitationsByChapter = async (\n  chapterId: ChapterId,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidChapterId(chapterId)) throw new Error('Invalid chapter id');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(\n    `/recitations/${recitationId}/by_chapter/${chapterId}`,\n    params,\n    options?.fetchFn\n  );\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific juz\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-juz-recitaiton\n * @param {JuzNumber} juz\n * @param {string} recitationId\n * @param {GetRecitationsOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByJuz('1', '2')\n */\nconst findVerseRecitationsByJuz = async (\n  juz: JuzNumber,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidJuz(juz)) throw new Error('Invalid juz');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_juz/${juz}`, params, options?.fetchFn);\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific mushaf page\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-page-recitaiton\n * @param {PageNumber} page\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByPage('1', '2')\n */\nconst findVerseRecitationsByPage = async (\n  page: PageNumber,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidQuranPage(page)) throw new Error('Invalid page');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_page/${page}`, params, options?.fetchFn);\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific rub\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-rub-el-hizb-recitaiton\n * @param {RubNumber} rub\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByRub('1', '2')\n */\nconst findVerseRecitationsByRub = async (\n  rub: RubNumber,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidRub(rub)) throw new Error('Invalid rub');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_rub/${rub}`, params, options?.fetchFn);\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific hizb\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-hizb-recitaiton\n * @param {HizbNumber} hizb\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByHizb('1', '2')\n */\nconst findVerseRecitationsByHizb = async (\n  hizb: HizbNumber,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidHizb(hizb)) throw new Error('Invalid hizb');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_hizb/${hizb}`, params, options?.fetchFn);\n\n  return data;\n};\n\n/**\n * Get all verse audio files for a specific reciter and a specific verse\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/list-ayah-recitaiton\n * @param {VerseKey} key\n * @param {string} recitationId\n * @param {GetVerseRecitationOptions} options\n * @example\n * quran.v4.audio.findVerseRecitationsByKey('1:1', '2')\n */\nconst findVerseRecitationsByKey = async (\n  key: VerseKey,\n  recitationId: string,\n  options?: GetVerseRecitationOptions\n) => {\n  if (!Utils.isValidVerseKey(key)) throw new Error('Invalid verse key');\n\n  const params = mergeApiOptions(options, defaultVerseRecitationsOptions);\n  const data = await fetcher<{\n    audioFiles: VerseRecitation[];\n    pagination: Pagination;\n  }>(`/recitations/${recitationId}/by_ayah/${key}`, params, options?.fetchFn);\n\n  return data;\n};\n\nconst audio = {\n  findAllChapterRecitations,\n  findChapterRecitationById,\n  findVerseRecitationsByChapter,\n  findVerseRecitationsByJuz,\n  findVerseRecitationsByPage,\n  findVerseRecitationsByRub,\n  findVerseRecitationsByHizb,\n  findVerseRecitationsByKey,\n};\n\nexport default audio;\n","import {\n  ChapterInfoResource,\n  ChapterReciterResource,\n  Language,\n  LanguageResource,\n  RecitationInfoResource,\n  RecitationResource,\n  RecitationStylesResource,\n  TafsirInfoResource,\n  TafsirResource,\n  TranslationInfoResource,\n  TranslationResource,\n  VerseMediaResource,\n} from '../../types';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\nimport { fetcher, mergeApiOptions } from './_fetcher';\n\ntype GetResourceOptions = Partial<BaseApiOptions>;\n\nconst defaultOptions: GetResourceOptions = {\n  language: Language.ARABIC,\n};\n\n/**\n * Get all recitations.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/recitations\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllRecitations()\n */\nconst findAllRecitations = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options);\n  const { recitations } = await fetcher<{\n    recitations: RecitationResource[];\n  }>('/resources/recitations', params, options?.fetchFn);\n\n  return recitations;\n};\n\n/**\n * Get all recitation info.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/recitation-info\n * @param {string} id recitation id\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findRecitationInfo('1')\n */\nconst findRecitationInfo = async (id: string, options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { info } = await fetcher<{\n    info: RecitationInfoResource;\n  }>(`/resources/recitations/${id}/info`, params, options?.fetchFn);\n\n  return info;\n};\n\n/**\n * Get all translations.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/translations\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllTranslations()\n */\nconst findAllTranslations = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { translations } = await fetcher<{\n    translations: TranslationResource[];\n  }>('/resources/translations', params, options?.fetchFn);\n\n  return translations;\n};\n\n/**\n * Get translation info.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/translation-info\n * @param {string} id translation id\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findTranslationInfo('169')\n */\nconst findTranslationInfo = async (\n  id: string,\n  options?: GetResourceOptions\n) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { info } = await fetcher<{\n    info: TranslationInfoResource;\n  }>(`/resources/translations/${id}/info`, params, options?.fetchFn);\n\n  return info;\n};\n\n/**\n * Get all tafsirs.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/tafsirs\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllTafsirs()\n */\nconst findAllTafsirs = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { tafsirs } = await fetcher<{\n    tafsirs: TafsirResource[];\n  }>('/resources/tafsirs', params, options?.fetchFn);\n\n  return tafsirs;\n};\n\n/**\n * Get tafsir info.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/tafsir-info\n * @param {string} id tafsir id\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findTafsirInfo('1')\n */\nconst findTafsirInfo = async (id: string, options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { info } = await fetcher<{\n    info: TafsirInfoResource;\n  }>(`/resources/tafsirs/${id}/info`, params, options?.fetchFn);\n\n  return info;\n};\n\n/**\n * Get all recitation styles.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/recitation-styles\n * @example\n * quran.v4.resources.findAllRecitationStyles()\n */\nconst findAllRecitationStyles = async (\n  options?: Omit<BaseApiOptions, 'language'>\n) => {\n  const { recitationStyles } = await fetcher<{\n    recitationStyles: RecitationStylesResource;\n  }>('/resources/recitation_styles', undefined, options?.fetchFn);\n\n  return recitationStyles;\n};\n\n/**\n * Get all languages.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/languages\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllLanguages()\n */\nconst findAllLanguages = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { languages } = await fetcher<{\n    languages: LanguageResource[];\n  }>('/resources/languages', params, options?.fetchFn);\n\n  return languages;\n};\n\n/**\n * Get all chapter infos.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/chapter-info\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllChapterInfos()\n */\nconst findAllChapterInfos = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { chapterInfos } = await fetcher<{\n    chapterInfos: ChapterInfoResource[];\n  }>('/resources/chapter_infos', params, options?.fetchFn);\n\n  return chapterInfos;\n};\n\n/**\n * Get verse media.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/verse-media\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findVerseMedia()\n */\nconst findVerseMedia = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { verseMedia } = await fetcher<{\n    verseMedia: VerseMediaResource;\n  }>(`/resources/verse_media`, params, options?.fetchFn);\n\n  return verseMedia;\n};\n\n/**\n * Get all chapter reciters.\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/chapter-reciters\n * @param {GetResourceOptions} options\n * @example\n * quran.v4.resources.findAllChapterReciters()\n */\nconst findAllChapterReciters = async (options?: GetResourceOptions) => {\n  const params = mergeApiOptions(options, defaultOptions);\n  const { reciters } = await fetcher<{\n    reciters: ChapterReciterResource[];\n  }>(`/resources/chapter_reciters`, params, options?.fetchFn);\n\n  return reciters;\n};\n\nconst resources = {\n  findAllRecitations,\n  findAllTranslations,\n  findAllTafsirs,\n  findAllRecitationStyles,\n  findAllLanguages,\n  findVerseMedia,\n  findAllChapterReciters,\n  findAllChapterInfos,\n  findRecitationInfo,\n  findTranslationInfo,\n  findTafsirInfo,\n};\n\nexport default resources;\n","import { Language, SearchResponse } from '../../types';\nimport { BaseApiOptions } from '../../types/BaseApiOptions';\nimport { fetcher, mergeApiOptions } from './_fetcher';\n\ntype SearchOptions = Partial<\n  BaseApiOptions & {\n    size: number;\n    page: number;\n  }\n>;\n\nconst defaultSearchOptions: SearchOptions = {\n  language: Language.ARABIC,\n  size: 30,\n};\n\n/**\n * Search\n * @description https://api-docs.quran.com/docs/quran.com_versioned/4.0.0/search\n * @param {string} q search query\n * @param {SearchOptions} options\n * @example\n * quran.v4.search.search('نور')\n * quran.v4.search.search('نور', { language: Language.ENGLISH })\n * quran.v4.search.search('نور', { language: Language.ENGLISH, size: 10 })\n * quran.v4.search.search('نور', { language: Language.ENGLISH, page: 2 })\n */\nconst search = async (q: string, options?: SearchOptions) => {\n  const params = mergeApiOptions({ q, ...options }, defaultSearchOptions);\n  const { search } = await fetcher<SearchResponse>(\n    '/search',\n    params,\n    options?.fetchFn\n  );\n\n  return search;\n};\n\nconst searchApi = { search };\n\nexport default searchApi;\n","import chapters from './chapters';\nimport verses from './verses';\nimport juzs from './juzs';\nimport audio from './audio';\nimport resources from './resources';\nimport search from './search';\n\nconst v4 = {\n  chapters,\n  verses,\n  juzs,\n  audio,\n  resources,\n  search,\n};\n\nexport default v4;\n","import v4 from './v4';\nimport utils from './utils';\n\nconst quran = {\n  v4,\n  utils,\n};\n\nexport default quran;\n"]}